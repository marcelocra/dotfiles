[
  {
    // This and other similar bindings are used to help organize the file. It is not a valid keybinding and won't be
    // triggered, but appears at the top when searching for symbols.
    "key": "DOCS"
  },

  //
  //
  // REVIEWED {{{
  //

  {
    "key": "REVIEWED"
  },

  //
  //
  // NAVIGATION {{{
  // Enabled only when Vim mode is not active.
  //

  {
    "key": "NAVIGATION"
  },

  {
    "key": "ctrl+,",
    "command": "workbench.action.navigateBack",
    "when": "!vim.active"
  },

  {
    "key": "ctrl+.",
    "command": "workbench.action.navigateForward",
    "when": "!vim.active"
  },

  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "vim.active"
  },

  {
    "key": "ctrl+alt+-",
    "command": "-workbench.action.navigateBack",
    "when": "vim.active"
  },

  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward",
    "when": "vim.active"
  },

  {
    "key": "ctrl+,",
    "command": "-workbench.action.openSettings",
    "when": "vim.active"
  },

  //
  //
  // NAVIGATION }}}
  //

  //
  //
  // TERMINAL FOCUS {{{
  //

  {
    "key": "TERMINAL FOCUS"
  },

  {
    // If terminal is opened and active, focus on the text editor ...
    "key": "ctrl+m",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "activePanel && terminalFocus"
  },

  {
    // ... otherwise, focus on the panel.
    "key": "ctrl+m",
    "command": "workbench.action.terminal.focus",
    "when": "activePanel && !terminalFocus"
  },

  {
    // If the panel is active, but not maximized, maximize it.
    "key": "ctrl+alt+`",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "activePanel && terminalFocus"
  },

  {
    // If the panel is not active, activate and maximize it.
    "key": "ctrl+alt+`",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "!activePanel || !terminalFocus"
  },

  //
  //
  // TERMINAL FOCUS }}}
  //

  //
  //
  // TERMINAL FIND {{{
  //

  {
    "key": "TERMINAL FIND"
  },

  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },

  //
  //
  // TERMINAL FIND }}}
  //

  //
  //
  // PROPER CTRL+P PROPER SUPPORT IN TERMINAL {{{
  //

  {
    "key": "PROPER CTRL+P PROPER SUPPORT IN TERMINAL"
  },

  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "when": "!terminalFocus"
  },

  {
    "key": "ctrl+p",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u0010"
    },
    "when": "terminalFocus"
  },

  //
  //
  // PROPER CTRL+P PROPER SUPPORT IN TERMINAL }}}
  //

  //
  //
  // IMPROVED VSCODE VIM SUPPORT {{{
  //

  {
    "key": "IMPROVED VSCODE VIM SUPPORT"
  },

  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },

  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },

  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "vim.mode == 'Visual'"
  },

  {
    "key": "ctrl+n",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "vim.mode == 'Visual'"
  },

  {
    "key": "ctrl+p",
    "command": "editor.action.moveSelectionToPreviousFindMatch",
    "when": "vim.mode == 'Visual'"
  },

  {
    // Navigate to the next suggestion in menus.
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetVisible"
  },

  {
    // Navigate to the previous suggestion in menus.
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetVisible"
  },

  {
    "key": "ctrl+j",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },

  {
    "key": "ctrl+k",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },

  {
    "key": "ctrl+j",
    "command": "selectNextCodeAction",
    "when": "codeActionMenuVisible"
  },

  {
    "key": "ctrl+k",
    "command": "selectPrevCodeAction",
    "when": "codeActionMenuVisible"
  },

  {
    // Focus on the group that is above the current one (in a split view).
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "vim.mode == 'Normal' && editorTextFocus && vim.active"
  },

  {
    // Override VSCode Vim's ctrl+f. Use ctrl+d and / inst
    "key": "ctrl+f",
    "command": "actions.find"
  },

  {
    // Enable default ctrl+h behavior in Insert mode.
    "key": "ctrl+h",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorTextFocus && vim.mode == 'Insert'"
  },

  {
    // Enable default ctrl+w behavior, except in Insert mode.
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor",
    "when": "editorTextFocus && vim.mode != 'Insert'"
  },

  {
    "key": "ctrl+o",
    "command": "workbench.action.navigateBack"
  },

  {
    "key": "ctrl+i",
    "command": "workbench.action.navigateForward"
  },

  {
    // Example:
    // Rebind ctrl+shift+y to yy in normal mode.
    "key": "ctrl+shift+y",
    "command": "vim.remap",
    "when": "inputFocus && vim.mode == 'Normal'",
    "args": {
      "after": ["y", "y"]
    }
  },

  //
  //
  // IMPROVED VSCODE VIM SUPPORT }}}
  //

  //
  //
  // CLOJURE {{{
  //

  {
    "key": "CLOJURE"
  },

  {
    "key": "ctrl+alt+c enter",
    "command": "-calva.loadFile",
    "when": "vim.active && vim.mode == 'Normal' && calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  // Slurp and barf using <( >( >) <). {{{

  {
    // Slurp and barf using <( >( >) <).
    "key": "shift+, shift+9",
    "command": "paredit.slurpSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "ctrl+shift+alt+left",
    "command": "-paredit.slurpSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "shift+. shift+0",
    "command": "paredit.slurpSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "ctrl+alt+.",
    "command": "-paredit.slurpSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "shift+, shift+0",
    "command": "paredit.barfSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "ctrl+alt+,",
    "command": "-paredit.barfSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "shift+. shift+9",
    "command": "paredit.barfSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  {
    // Slurp and barf using <( >( >) <).
    "key": "ctrl+shift+alt+right",
    "command": "-paredit.barfSexpBackward",
    "when": "vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  // Slurp and barf using <( >( >) <). }}}

  // Replicate Conjure behavior. {{{

  {
    // Replicate Conjure behavior.
    "key": "space e b",
    "command": "calva.loadFile",
    "when": "vim.active && vim.mode == 'Normal' && calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space w",
    "command": "paredit.wrapAroundParens",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space o",
    "command": "paredit.raiseSexp",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e e",
    "command": "calva.evaluateSelection",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e w",
    "command": "calva.evaluateSelection",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e r",
    "command": "calva.evaluateCurrentTopLevelForm",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  // Conjure end. }}}

  // JavaScript eval (similar to Conjure). {{{

  // {
  //   "key": "space e r",
  //   "command": "workbench.action.tasks.runTask",
  //   "args": "exec-with-deno",
  //   "when": "vim.active && (vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && (editorLangId == 'javascript' || editorLangId == 'javascriptreact' || editorLangId == 'typescript' || editorLangId == 'typescriptreact')"
  // },

  // JavaScript eval end. }}}

  {
    // Prevents Calva from stealing ctrl+shift+t, which I use to reopen closed tabs.
    "key": "ctrl+shift+t t",
    "command": "-calva.tapSelection",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    // Prevents Calva from stealing ctrl+shift+t, which I use to reopen closed tabs.
    "key": "ctrl+shift+t space",
    "command": "-calva.tapCurrentTopLevelForm",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    // Prevents Calva from stealing ctrl+backspace, which I used extensively to delete words.
    "key": "ctrl+backspace",
    "command": "-paredit.killListBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  //
  //
  // CLOJURE }}}
  //

  //
  //
  // EDITOR {{{
  //

  {
    "key": "EDITOR"
  },

  {
    "key": "alt+shift+r",
    "command": "workbench.action.tasks.runTask"
  },

  {
    "key": "alt+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },

  {
    "key": "alt+x",
    "command": "workbench.view.extensions",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.extensions'"
  },

  {
    "key": "alt+x",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions'"
  },

  {
    "key": "alt+v",
    "command": "toggleVim"
  },

  {
    "key": "alt+m",
    "command": "editor.action.toggleMinimap"
  },

  {
    "key": "alt+g",
    "command": "workbench.view.scm",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.scm'"
  },

  {
    "key": "alt+g",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
  },

  {
    "key": "alt+e",
    "command": "workbench.view.explorer",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.explorer'"
  },

  {
    "key": "alt+e",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
  },

  {
    "key": "alt+o",
    "command": "runCommands",
    "args": {
      "commands": ["outline.focus", "outline.focus"]
    },
    "when": "focusedView != 'outline'"
  },

  {
    "key": "alt+o",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "focusedView == 'outline'"
  },

  {
    "key": "alt+f",
    "command": "workbench.view.search",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.search'"
  },

  {
    "key": "alt+f",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.search'"
  },

  {
    "key": "alt+shift+f",
    "command": "search.action.openNewEditorToSide"
  },

  {
    "key": "alt+a",
    "command": "workbench.action.toggleActivityBarVisibility"
  },

  {
    "key": "alt+i",
    "command": "ionide.projectExplorerInActivity.focus"
  },

  {
    "key": "alt+p",
    "command": "issue.copyGithubPermalink"
  },

  {
    "key": "alt+l",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditor",
    "when": "!terminalFocus"
  },

  {
    "key": "alt+shift+s",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.newGroupRight",
        "workbench.action.openApplicationSettingsJson",
        "workbench.action.openGlobalSettings",
        // "workbench.action.moveEditorGroupToNewWindow",
        "workbench.action.openApplicationSettingsJson"
      ]
    }
  },

  {
    "key": "alt+shift+k",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.newGroupRight",
        "workbench.action.openGlobalKeybindingsFile",
        "workbench.action.openGlobalKeybindings",
        // "workbench.action.moveEditorGroupToNewWindow",
        "workbench.action.openGlobalKeybindingsFile"
      ]
    }
  },

  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.replaceInFiles",
    "when": "editorTextFocus"
  },

  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "!editorTextFocus"
  },

  {
    // Restart processes that might be using stale info.
    //
    // NOTE: It will show and error notification if some of them are not
    // available in the current workspace. If the one that failed is above
    // others, it will not restart the others. Comment it out and try again.
    "key": "alt+r",
    "command": "runCommands",
    "args": {
      "commands": [
        "typescript.restartTsServer",
        "deno.client.restart",
        "elm.commands.restart",

        "eslint.restart"
        // "svelte.restartLanguageServer"  // Not working, even from the command palette.
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Insert')"
  },

  {
    "key": "alt+k",
    "command": "-keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },

  {
    "key": "alt+k",
    "command": "workbench.action.nextEditor",
    "when": "!terminalFocus"
  },

  {
    "key": "alt+j",
    "command": "workbench.action.previousEditor",
    "when": "!terminalFocus"
  },

  {
    "key": "alt+c",
    "command": "workbench.files.action.collapseExplorerFolders",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
  },

  {
    "key": "alt+shift+b",
    "command": "workbench.action.toggleAuxiliaryBar"
  },

  {
    "key": "alt+z",
    "command": "workbench.action.toggleZenMode"
  },

  {
    "key": "ctrl+alt+space",
    "command": "github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },

  {
    "key": "ctrl+alt+space",
    "command": "github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
  },

  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },

  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
  },

  {
    "key": "ctrl+enter",
    "command": "notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },

  {
    "key": "meta+enter",
    "command": "-notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },

  {
    "key": "alt+shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
  },

  {
    "key": "alt+w",
    "command": "editor.action.toggleWordWrap",
    "when": "editorTextFocus && textInputFocus && vim.mode != 'Visual'"
  },

  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },

  {
    "key": "shift+alt+n",
    "command": "workbench.action.files.newUntitledFile"
  },

  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },

  {
    "key": "ctrl+k",
    "command": "workbench.action.quickTextSearch",
    // This is necessary because we use ctrl+k to navigate up in menus. This one
    // must have a negative of the combination of all others, i.e., if they are
    // `when: A`, `when: B`, `when: C`, this one must be `when: !A && !B && !C`,
    // which is the same thing as `when: !(A || B || C)`.
    "when": "!(suggestWidgetVisible || (inQuickInput && quickInputType == 'quickPick') || codeActionMenuVisible)"
  },

  {
    // This mode is quite annoying, stealing focus weirdly.
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },

  {
    // Search through all symbols in a file. Amazing feature for productivity!
    "key": "ctrl+t",
    "command": "workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },

  {
    // Search through all symbols in a workspace.
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },

  {
    // Search through all symbols in a workspace.
    "key": "ctrl+shift+o",
    "command": "workbench.action.showAllSymbols",
    "when": "editorTextFocus"
  },

  {
    // Search through all symbols in a workspace.
    "key": "alt+t",
    "command": "workbench.action.showAllSymbols",
    "when": "editorTextFocus"
  },

  {
    "key": "ctrl+shift+o",
    "command": "-workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },

  {
    "key": "ctrl+i",
    "command": "-workbench.action.terminal.chat.focusInput",
    "when": "terminalChatFocus && !inlineChatFocused"
  },

  {
    "key": "ctrl+i",
    "command": "-workbench.action.terminal.chat.start",
    "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
  },

  {
    "key": "alt+=",
    "command": "workbench.action.toggleCenteredLayout",
    // Because this kbd has meaning in the search editor.
    "when": "!inSearchEditor"
  },

  {
    "key": "EDITOR - NEXT ABOVE",
    "command": "",
    "when": ""
  },

  //
  //
  // EDITOR }}}
  //

  //
  //
  // CAMELCASE MOVEMENTS BETWEEN HUMPS, AKA cursorWordPart {{{
  //

  {
    "key": "CAMELCASE MOVEMENTS BETWEEN HUMPS, AKA cursorWordPart"
  },

  {
    "key": "alt+l",
    "command": "cursorWordPartRight",
    "when": "!vim.active && textInputFocus"
  },

  {
    "key": "alt+shift+l",
    "command": "cursorWordPartRightSelect",
    "when": "!vim.active && textInputFocus"
  },

  {
    "key": "alt+h",
    "command": "cursorWordPartStartLeft",
    "when": "!vim.active && textInputFocus"
  },

  {
    "key": "alt+shift+h",
    "command": "cursorWordPartStartLeftSelect",
    "when": "!vim.active && textInputFocus"
  },

  {
    "key": "alt+backspace",
    "command": "deleteWordPartLeft",
    "when": "!vim.active && textInputFocus && !editorReadonly"
  },

  {
    "key": "alt+shift+backspace",
    "command": "deleteWordPartRight",
    "when": "!vim.active && textInputFocus && !editorReadonly"
  },

  {
    "key": "alt+delete",
    "command": "deleteWordPartRight",
    "when": "!vim.active && textInputFocus && !editorReadonly"
  },

  {
    "key": "alt+shift+delete",
    "command": "deleteWordPartLeft",
    "when": "!vim.active && textInputFocus && !editorReadonly"
  }

  //
  //
  // CAMELCASE MOVEMENTS BETWEEN HUMPS, AKA cursorWordPart }}}
  //

  //
  //
  // REVIEWED }}}
  // Commented keybindings below are the ones I'm not sure I need. I'll keep
  // them here for a while, just in case.
  //

  // {
  //   "key": "alt+c",
  //   "command": "list.collapseAll",
  //   "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
  // },

  //============================================================================
  //= misc
  //============================================================================

  // {
  //   "key": "ctrl+.",
  //   "command": "-problems.action.showQuickFixes",
  //   "when": "problemFocus"
  // },

  // {
  //   "key": "ctrl+.",
  //   "command": "-settings.action.editFocusedSetting",
  //   "when": "inSettingsSearch"
  // },

  // {
  //   "key": "ctrl+[",
  //   "command": "workbench.action.navigateBack"
  // },
  // {
  //   "key": "ctrl+]",
  //   "command": "workbench.action.navigateForward"
  // },

  // {
  //   "key": "ctrl+n",
  //   "command": "workbench.action.tasks.runTask",
  //   "args": "run-node-for-current-file",
  //   "when": "vim.mode == 'Insert' && editorTextFocus"
  // },

  // {
  //   "key": "ctrl+p",
  //   "command": "search.action.focusPreviousSearchResult",
  //   "when": "inSearchEditor"
  // },
]
