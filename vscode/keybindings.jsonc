// Place your key bindings in this file to override the defaults.
[
  // -reviewed(
  // -navigation(
  {
    "key": "ctrl+,",
    "command": "workbench.action.navigateBack"
  },
  {
    "key": "ctrl+alt+-",
    "command": "-workbench.action.navigateBack"
  },
  {
    "key": "ctrl+.",
    "command": "workbench.action.navigateForward"
  },
  {
    "key": "ctrl+shift+-",
    "command": "-workbench.action.navigateForward"
  },
  // )navigation-

  {
    "key": "ctrl+,",
    "command": "-workbench.action.openSettings"
  },
  {
    "key": "ctrl+shift+,",
    "command": "workbench.action.openSettings"
  },
  // )reviewed-

  // -macos(
  {
    "key": "cmd+shift+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus && isMac"
  },
  {
    "key": "cmd+shift+m",
    "command": "-workbench.actions.view.problems",
    "when": "workbench.panel.markers.view.active && isMac"
  },
  // )macos-

  // {
  //   // TODO: figure out what does this do.
  //   "key": "ctrl+e",
  //   "command": "-workbench.action.quickOpen"
  // },
  // // Terminal panel behavior. -terminal(
  {
    "key": "alt+shift+m",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "terminalFocus && !isMac"
  },

  //
  //
  // ========================================================================= {
  // Toggle terminal
  // ---------------
  // Uses `ctrl+t` keybindings to toggle the terminal panel.
  //

  // {
  //   // If panel is not active, open it.
  //   "key": "ctrl+t",
  //   "command": "workbench.action.togglePanel"
  // },
  // {
  //   // If the panel is active but the terminal is not focused, focus it.
  //   "key": "ctrl+t",
  //   "command": "workbench.action.terminal.focus",
  //   "when": "activePanel && !terminalFocus"
  // },
  // // Previous behavior. {{{
  // {
  //   // If terminal is opened and active, focus on the text editor.
  //   "key": "ctrl+`",
  //   "command": "workbench.action.focusLastEditorGroup",
  //   "when": "activePanel && terminalFocus"
  // },
  // {
  //   // If terminal is opened and active, close it. This is the default behavior for ctrl+`, but I
  //   // replaced by this because most likely I'll want to have it opened more than closed.
  //   "key": "ctrl+m",
  //   "command": "workbench.action.togglePanel"
  // },
  // }}}
  {
    // If terminal is opened and active, focus on the text editor ...
    "key": "ctrl+m",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "activePanel && terminalFocus"
  },
  {
    // ... otherwise, focus on the panel.
    "key": "ctrl+m",
    "command": "workbench.action.terminal.focus",
    "when": "activePanel && !terminalFocus"
  },
  {
    // If the panel is active, but not maximized, maximize it.
    "key": "ctrl+alt+`",
    "command": "workbench.action.toggleMaximizedPanel",
    "when": "activePanel && terminalFocus"
  },

  // {
  //   "key": "ctrl+k",
  //   "command": "workbench.action.terminal.sendSequence",
  //   "args": {
  //     "text": "^k"
  //   },
  //   "when": "terminalFocus"
  // },

  {
    "key": "ctrl+shift+f",
    "command": "workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+f",
    "command": "-workbench.action.terminal.focusFind",
    "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpen",
    "when": "!terminalFocus"
  },
  {
    "key": "ctrl+e",
    "command": "-workbench.action.quickOpen"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  // {
  //   "key": "ctrl+c",
  //   "command": "workbench.action.terminal.copySelection",
  //   "when": "terminalFocus"
  // },
  // {
  //   "key": "ctrl+v",
  //   "command": "workbench.action.terminal.paste",
  //   "when": "terminalFocus"
  // },
  // {
  //   "key": "ctrl+shift+c",
  //   "command": "workbench.action.terminal.sendSequence",
  //   "args": {
  //     "text": "\u0003"
  //   },
  //   "when": "terminalFocus"
  // },

  // // )terminal-

  //============================================================================
  //= editor
  //============================================================================

  {
    "key": "ctrl+shift+,",
    "command": "-editor.action.inPlaceReplace.up",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+.",
    "command": "-editor.action.quickFix",
    "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k ctrl+x",
    "command": "-editor.action.trimTrailingWhitespace",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "vim.mode == 'Visual'"
  },
  {
    "key": "ctrl+n",
    "command": "editor.action.moveSelectionToNextFindMatch",
    "when": "vim.mode == 'Visual'"
  },
  {
    "key": "ctrl+p",
    "command": "editor.action.moveSelectionToPreviousFindMatch",
    "when": "vim.mode == 'Visual'"
  },
  {
    "key": "ctrl+alt+c enter",
    "command": "-calva.loadFile",
    "when": "vim.active && vim.mode == 'Normal' && calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  // Slurp and barf using <( >( >) <).
  {
    "key": "shift+, shift+9",
    "command": "paredit.slurpSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+left",
    "command": "-paredit.slurpSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+. shift+0",
    "command": "paredit.slurpSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+.",
    "command": "-paredit.slurpSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+, shift+0",
    "command": "paredit.barfSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+alt+,",
    "command": "-paredit.barfSexpForward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "shift+. shift+9",
    "command": "paredit.barfSexpBackward",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    "key": "ctrl+shift+alt+right",
    "command": "-paredit.barfSexpBackward",
    "when": "vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  // End slurp and barf changes.

  // Conjure.
  {
    // Replicate Conjure behavior.
    "key": "space e b",
    "command": "calva.loadFile",
    "when": "vim.active && vim.mode == 'Normal' && calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space w",
    "command": "paredit.wrapAroundParens",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space o",
    "command": "paredit.raiseSexp",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e e",
    "command": "calva.evaluateSelection",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e w",
    "command": "calva.evaluateSelection",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  {
    // Replicate Conjure behavior.
    "key": "space e r",
    "command": "calva.evaluateCurrentTopLevelForm",
    "when": "vim.active && vim.mode == 'Normal' && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },
  // Conjure end.

  // JavaScript eval (similar to Conjure).
  {
    "key": "space e r",
    "command": "workbench.action.tasks.runTask",
    "args": "exec-with-deno",
    "when": "vim.active && (vim.mode == 'Visual' || vim.mode == 'VisualLine') && editorTextFocus && (editorLangId == 'javascript' || editorLangId == 'javascriptreact' || editorLangId == 'typescript' || editorLangId == 'typescriptreact')"
  },
  // JavaScript eval end.

  {
    // Prevents Calva from stealing ctrl+shift+t, which I use to reopen closed tabs.
    "key": "ctrl+shift+t t",
    "command": "-calva.tapSelection",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    // Prevents Calva from stealing ctrl+shift+t, which I use to reopen closed tabs.
    "key": "ctrl+shift+t space",
    "command": "-calva.tapCurrentTopLevelForm",
    "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
  },
  {
    // Prevents Calva from stealing ctrl+backspace, which I used extensively to delete words.
    "key": "ctrl+backspace",
    "command": "-paredit.killListBackward",
    "when": "calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  },

  // )calva-

  //============================================================================
  //= paredit
  //============================================================================

  // {
  //   "key": "ctrl+backspace",
  //   "command": "-paredit.killListBackward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "alt+shift+left",
  //   "command": "paredit.barfSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+left",
  //   "command": "-paredit.barfSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "alt+shift+right",
  //   "command": "paredit.slurpSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+right",
  //   "command": "-paredit.slurpSexpForward",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "alt+s",
  //   "command": "paredit.spliceSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+alt+s",
  //   "command": "-paredit.spliceSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "alt+shift+s",
  //   "command": "paredit.splitSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },
  // {
  //   "key": "ctrl+shift+s",
  //   "command": "-paredit.splitSexp",
  //   "when": "editorTextFocus && editorLangId == 'clojure' && paredit:keyMap =~ /original|strict/"
  // },

  //============================================================================
  //= camelCase movements between humps, aka cursorWordPart.
  //============================================================================

  {
    "key": "ctrl+alt+l",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+l",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+h",
    "command": "cursorWordPartStartLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+shift+h",
    "command": "cursorWordPartStartLeftSelect",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+alt+delete",
    "command": "deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },

  //============================================================================
  //= alt stuff
  //============================================================================
  {
    "key": "alt+b",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "alt+x",
    "command": "workbench.view.extensions",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.extensions'"
  },
  {
    "key": "alt+x",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions'"
  },
  {
    "key": "alt+v",
    "command": "toggleVim"
  },
  {
    "key": "alt+m",
    "command": "editor.action.toggleMinimap"
  },
  {
    "key": "alt+g",
    "command": "workbench.view.scm",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.scm'"
  },
  {
    "key": "alt+g",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
  },
  {
    "key": "alt+e",
    "command": "workbench.view.explorer",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.explorer'"
  },
  {
    "key": "alt+e",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
  },
  {
    "key": "alt+o",
    "command": "runCommands",
    "args": {
      "commands": ["outline.focus", "outline.focus"]
    },
    "when": "focusedView != 'outline'"
  },
  {
    "key": "alt+o",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "focusedView == 'outline'"
  },
  {
    "key": "alt+f",
    "command": "workbench.view.search",
    "when": "!sideBarFocus || activeViewlet != 'workbench.view.search'"
  },
  {
    "key": "alt+f",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.search'"
  },
  {
    "key": "alt+a",
    "command": "workbench.action.toggleActivityBarVisibility"
  },
  {
    "key": "alt+i",
    "command": "ionide.projectExplorerInActivity.focus"
  },
  {
    "key": "alt+p",
    "command": "issue.copyGithubPermalink"
  },
  {
    // Enabling this, vscodevim ctrl+f is overwritten.
    "key": "ctrl+f",
    "command": "actions.find"
  },
  {
    "key": "ctrl+h",
    "command": "editor.action.startFindReplaceAction",
    "when": "vim.mode == 'Insert' && textInputFocus"
  },
  {
    "key": "ctrl+w",
    "command": "workbench.action.closeActiveEditor",
    "when": "textInputFocus && vim.mode != 'Insert'"
  },
  {
    "key": "alt+shift+s",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.newGroupRight",
        "workbench.action.openApplicationSettingsJson",
        "workbench.action.openGlobalSettings",
        // "workbench.action.moveEditorGroupToNewWindow",
        "workbench.action.openApplicationSettingsJson"
      ]
    }
  },
  {
    "key": "alt+shift+k",
    "command": "runCommands",
    "args": {
      "commands": [
        // "workbench.action.newGroupRight",
        "workbench.action.openGlobalKeybindingsFile",
        "workbench.action.openGlobalKeybindings",
        // "workbench.action.moveEditorGroupToNewWindow",
        "workbench.action.openGlobalKeybindingsFile"
      ]
    }
  },
  {
    "key": "alt+shift+w",
    "command": "workbench.action.closeAllEditors"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.replaceInFiles",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+h",
    "command": "workbench.action.focusLastEditorGroup",
    "when": "!editorTextFocus"
  },
  {
    // Restart processes that might be using stale info.
    //
    // NOTE: It will show and error notification if some of them are not
    // available in the current workspace. That is NOT problem, just close it.
    "key": "alt+r",
    "command": "runCommands",
    "args": {
      "commands": [
        "typescript.restartTsServer",
        "eslint.restart",
        "svelte.restartLanguageServer",
        "elm.commands.restart"
      ]
    },
    "when": "editorTextFocus && (vim.mode == 'Normal' || vim.mode == 'Insert')"
  },
  {
    "key": "alt+shift+r",
    "command": "workbench.action.reloadWindow"
  },
  {
    "key": "alt+k",
    "command": "-keybindings.editor.recordSearchKeys",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "alt+k",
    "command": "workbench.action.nextEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "alt+j",
    "command": "workbench.action.previousEditor",
    "when": "!terminalFocus"
  },
  {
    "key": "alt+c",
    "command": "workbench.files.action.collapseExplorerFolders",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.explorer'"
  },
  {
    "key": "alt+shift+b",
    "command": "workbench.action.toggleAuxiliaryBar"
  },

  // nextalt next alt

  // {
  //   "key": "alt+c",
  //   "command": "list.collapseAll",
  //   "when": "sideBarFocus && activeViewlet == 'workbench.view.scm'"
  // },

  //============================================================================
  //= misc
  //============================================================================

  {
    "key": "ctrl+.",
    "command": "-problems.action.showQuickFixes",
    "when": "problemFocus"
  },
  {
    "key": "ctrl+.",
    "command": "-settings.action.editFocusedSetting",
    "when": "inSettingsSearch"
  },
  {
    "key": "ctrl+alt+j",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+alt+k",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+k ctrl+f",
    "command": "workbench.action.toggleFullScreen",
    "when": "!isIOS"
  },
  {
    "key": "alt+z",
    "command": "workbench.action.toggleZenMode"
  },
  {
    "key": "ctrl+.",
    "command": "editor.action.quickFix",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !inInteractiveInput && !interactiveEditorFocused"
  },
  {
    "key": "ctrl+enter",
    "command": "notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  {
    "key": "meta+enter",
    "command": "-notebook.cell.execute",
    "when": "notebookCellListFocused && notebookMissingKernelExtension && !notebookCellExecuting && notebookCellType == 'code' || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelCount > 0 || notebookCellListFocused && !notebookCellExecuting && notebookCellType == 'code' && notebookKernelSourceCount > 0"
  },
  // {
  //   "key": "ctrl+[",
  //   "command": "workbench.action.navigateBack"
  // },
  // {
  //   "key": "ctrl+]",
  //   "command": "workbench.action.navigateForward"
  // },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.focusAboveGroup",
    "when": "vim.mode == 'Normal' && editorTextFocus && vim.active"
  },
  {
    "key": "alt+l",
    "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
    "when": "!activeEditorGroupEmpty"
  },
  {
    "key": "alt+shift+b",
    "command": "-gitlens.toggleCodeLens",
    "when": "editorTextFocus && !gitlens:disabled && !gitlens:disabledToggleCodeLens && config.gitlens.keymap == 'alternate'"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "(vim.mode == 'Normal' && vim.active) && (suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus || suggestWidgetVisible && textInputFocus && !suggestWidgetHasFocusedSuggestion)"
  },
  {
    "key": "alt+w",
    "command": "editor.action.toggleWordWrap"
  },
  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "ctrl+i",
    "command": "extension.vim_ctrl+i",
    "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl && vim.mode == 'Normal'"
  },
  {
    "key": "ctrl+i",
    "command": "-extension.vim_ctrl+i",
    "when": "editorTextFocus && vim.active && vim.use<C-i> && !inDebugRepl"
  },
  {
    "key": "alt+shift+l",
    "command": "workbench.action.tasks.runTask",
    "args": "toggle-light-dark"
  },
  // {
  //   "key": "ctrl+n",
  //   "command": "workbench.action.tasks.runTask",
  //   "args": "run-node-for-current-file",
  //   "when": "vim.mode == 'Insert' && editorTextFocus"
  // },
  {
    "key": "shift+alt+n",
    "command": "workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+p",
    "command": "search.action.focusPreviousSearchResult",
    "when": "inSearchEditor"
  },
  {
    "key": "ctrl+shift+k",
    "command": "workbench.action.quickTextSearch",
    "when": "!suggestWidgetVisible"
  },
  {
    "key": "ctrl+j",
    "command": "quickInput.next",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+k",
    "command": "quickInput.previous",
    "when": "inQuickInput && quickInputType == 'quickPick'"
  },
  {
    "key": "ctrl+m",
    "command": "-editor.action.toggleTabFocusMode"
  },
  {
    "key": "ctrl+t",
    "command": "-workbench.action.showAllSymbols"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.terminal.sendSequence",
    "args": {
      "text": "\u0010"
    },
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+i",
    "command": "-workbench.action.terminal.chat.focusInput",
    "when": "terminalChatFocus && !inlineChatFocused"
  },
  {
    "key": "ctrl+i",
    "command": "-workbench.action.terminal.chat.start",
    "when": "terminalChatAgentRegistered && terminalFocusInAny && terminalHasBeenCreated || terminalChatAgentRegistered && terminalFocusInAny && terminalProcessSupported"
  },
  {
    "key": "ctrl+t",
    "command": "workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  {
    "key": "ctrl+shift+o",
    "command": "workbench.action.showAllSymbols",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+o",
    "command": "-workbench.action.gotoSymbol",
    "when": "!accessibilityHelpIsShown && !accessibleViewIsShown"
  },
  {
    "key": "ctrl+enter",
    "command": "-github.copilot.generate",
    "when": "editorTextFocus && github.copilot.activated && !commentEditorFocused && !inInteractiveInput && !interactiveEditorFocused"
  }
]
