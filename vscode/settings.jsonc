{
  //////////////////////////////////////////////////////////////////////////////
  // Language and framework specific settings
  // #region

  //
  //
  // JSONs
  //

  "[json][jsonc][json5]": {
    "editor.fontSize": 13,
    "editor.lineHeight": 0
  },

  //
  //
  // JavaScript
  //

  "js/ts.implicitProjectConfig.checkJs": true,
  "javascript.preferences.importModuleSpecifierEnding": "js",
  "[javascript][javascriptreact]": {
    // "editor.rulers": [100, 120]
    // "editor.wordWrapColumn": 100
  },

  //
  //
  // TypeScript
  //

  // // Causes deno extension to report import errors.
  // "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "[typescript][typescriptreact]": {
    // "editor.rulers": [100, 120]
    // "editor.wordWrapColumn": 100
  },

  //
  //
  // Clojure / ClojureScript
  //

  "[clojure]": {
    // "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]/-`.",
    "editor.autoClosingBrackets": "always",
    "editor.autoClosingOvertype": "always",
    "editor.autoClosingQuotes": "always",
    "editor.formatOnType": true,
    "editor.autoIndent": "full",
    "editor.formatOnPaste": true,
    "editor.matchBrackets": "never",
    "editor.guides.indentation": false,
    "editor.parameterHints.enabled": false,
    "editor.unicodeHighlight.allowedCharacters": {
      " ": true,
      "êž‰": true
    },
    "editor.foldingStrategy": "indentation",
    "editor.defaultFormatter": "betterthantomorrow.calva"
  },

  //
  //
  // Calva
  //

  "calva.paredit.defaultKeyMap": "original",
  "calva.replConnectSequences": [],
  "calva.showCalvaSaysOnStart": false,
  "calva.prettyPrintingOptions": {
    "printEngine": "pprint",
    "enabled": true,
    "width": 40
  },

  //
  //
  // F# / FSharp
  //

  "FSharp.smartIndent": true,
  "FSharp.inlayHints.parameterNames": false,
  "FSharp.inlayHints.typeAnnotations": false,
  "[fsharp]": {
    "editor.defaultFormatter": "Ionide.Ionide-fsharp",
    "editor.tabSize": 4
  },
  "FSharp.addFsiWatcher": true,

  //
  //
  // Svelte
  //

  "svelte.enable-ts-plugin": true,
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },

  //
  //
  // Python
  //

  "[python]": {
    "editor.tabSize": 4,
    "editor.defaultFormatter": "ms-python.black-formatter"
  },

  "[python][shellscript]": {
    "vim.textwidth": 80
  },

  //
  //
  // Dart
  //

  "dart.openDevTools": "flutter",
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": "off",
    "editor.defaultFormatter": "Dart-Code.dart-code"
  },

  //
  //
  // C++ / Cpp
  //

  "C_Cpp.clang_format_fallbackStyle": "Google",
  "C_Cpp.clang_format_sortIncludes": true,
  "C_Cpp.clang_format_style": "Google",
  "[cpp]": {
    "editor.defaultFormatter": "ms-vscode.cpptools"
  },

  //
  //
  // Haskell
  //

  "haskell.manageHLS": "GHCup",

  //
  //
  // Go / Golang
  //

  "go.formatTool": "goimports",

  //
  //
  // Markdown (MD) / Asciidoc
  //

  "[markdown]": {
    // "editor.tabSize": 2,
    // "editor.insertSpaces": true,
    // "editor.autoClosingBrackets": "never"
  },

  "[asciidoc]": {
    // "editor.rulers": [80, 100, 120]
  },

  "asciidoc.antora.enableAntoraSupport": false,

  //
  //
  // Astro
  //

  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode"
  },

  //
  //
  // Eslint
  //

  "eslint.enable": true,
  "eslint.format.enable": true,
  "eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown",
    "svelte"
  ],
  "eslint.validate": ["javascript", "javascriptreact", "typescript", "typescriptreact"],

  "tailwindCSS.emmetCompletions": false, // I don't use these.
  "tailwindCSS.colorDecorators": true, // They are useful, though annoying.
  "tailwindCSS.experimental.classRegex": [
    // Always detect when wrapping strings with Tailwind-specific tagged
    // literals. You can define a simple identity function that receives a
    // tagged string literal as an argument and returns it.
    //
    // The function can be as simple as:
    //
    //    const tw = (string) => string;
    //
    // Or if you are using type annotations or TypeScript:
    //
    //    /**
    //     * Usage: tw`bg-red-500`
    //     *
    //     * @param {TemplateStringsArray} string
    //     */
    //    function tw(string) {
    //      return string;
    //    }
    //
    // The type annotation is useful because it will warn you if you use the
    // function without a template literal:
    //
    //    tw('bg-red-500')  //=> Argument of type 'string' is not assignable to
    //                      //=> parameter of type 'TemplateStringsArray'
    //
    "c`([^`]+)`",
    "tw`([^`]+)`",

    // Try to generalize.
    "[cC]lass[^\"'`]*[\"'`]([^\"'`]+)[\"'`]"

    // Old tries for this, kept here as a reference of what **might** work.
    //
    //
    // // For JS variables ending in [cC]lass.
    // "const.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    // "let.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    // "var.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    //
    //
    // // For JS objects with properties ending in [cC]lass.
    // ".*[cC]lass:\\s+[\"']([^\"']*)[\"']",
    //
    //
    // // For JS classList manipulation.
    // "\\.classList\\.[^\\(]*\\([\"']([^\"']*)[\"']\\)",
    //
    //
    // // For html-like attributes.
    // ".+[cC]lass=\"([^\"]*)\""
    //
    //
    // // For Clojure and Hiccup (not working).
    // ":class\\s+\"([^\"]*)\"",
    // ":([^\"]*)[cC]lass\"([^\"]*)\"",
    // ":[\\w-.#>]+\\.([\\w-]*)",
  ],
  "tailwindCSS.includeLanguages": {
    "clojure": "html",
    "vue": "html",
    "elm": "html"
  },

  //
  //
  // Ruby
  //

  "rubyLsp.rubyVersionManager": "asdf",

  //
  //
  // Nim
  //

  "[nim][nimble]": {
    "editor.defaultFormatter": "NimLang.nimlang"
  },

  //
  //
  // Vue
  //

  "vue.server.hybridMode": "typeScriptPluginOnly",
  "lit-html.tags": ["html", "css", "vue"],

  //
  //
  // YAML
  //

  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },

  //
  //
  // Elm
  //

  "[elm]": {
    "editor.defaultFormatter": "elmTooling.elm-ls-vscode"
  },

  //
  // Next language or framework specific setting above.
  // #endregion
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Tools
  // #region

  //
  //
  // Vim
  //

  "vim.leader": ",",
  "vim.easymotion": true,
  "vim.sneak": true,
  "vim.surround": true,
  "vim.incsearch": true,
  "vim.useSystemClipboard": true,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.smartRelativeLine": false,
  "vim.foldfix": true,
  "vim.camelCaseMotion.enable": true,

  // Use this for most languages and files. I change it for some particular file
  // types in their sessions, search for it here to see (e.g. Python and Shell).
  // Ideally, it should be in sync with preferences from the .editorconfig file.
  "vim.textwidth": 120,

  "vim.enableNeovim": true,
  "vim.neovimUseConfigFile": true,

  // This is VERY, PAINFULLY, UNUSABLY slow in Ubuntu 20.04. It uses gdbus, as shown in the
  // following link. I also got the scripts (get-im and set-im) from there:
  //
  //    https://github.com/daipeihust/im-select?tab=readme-ov-file#gdbus
  //
  // "vim.autoSwitchInputMethod.enable": true,
  // "vim.autoSwitchInputMethod.defaultIM": "1",
  // "vim.autoSwitchInputMethod.obtainIMCmd": "/home/marcelocra/bin/get-im",
  // "vim.autoSwitchInputMethod.switchIMCmd": "/home/marcelocra/bin/set-im {im}",

  // -viminsert
  "vim.insertModeKeyBindingsNonRecursive": [
    {
      "before": ["j", "f"],
      "after": ["<esc>"]
    },
    {
      "before": ["f", "j"],
      "after": ["<esc>"]
    },
    {
      // something to try...
      // TODO: review later
      "before": ["<c-m>"],
      "after": ["<esc>"]
    },
    {
      // save and stay in insert mode
      "before": ["<leader>", "w"],
      "commands": [":w"],
      "after": ["<esc>a"]
    },
    {
      // save and leave insert mode
      "before": ["<leader>", "s"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      // try to quit without saving
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      // save and quit
      "before": ["<leader>", "x"],
      "commands": [":x"]
    }
    // {
    //   "before": ["<c-t>"],
    //   "commands": ["workbench.action.showAllSymbols"]
    // }
  ],
  // viminsert-

  // -vimnormal
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<leader>", "j"],
      "after": ["o", "<esc>", "k"]
    },
    {
      "before": ["<leader>", "k"],
      "after": ["O", "<esc>", "j"]
    },
    // Use vim-unimpaired shortcuts.
    {
      "before": ["[", "t"],
      "commands": [":tabp"]
    },
    {
      "before": ["]", "t"],
      "commands": [":tabn"]
    },
    {
      "before": ["<c-l>"],
      "after": ["<c-w>", "l"]
    },
    {
      "before": ["<c-h>"],
      "after": ["<c-w>", "h"]
    },
    {
      "before": ["<c-j>"],
      "after": ["<c-w>", "j"]
    },
    {
      "before": ["<c-k>"],
      "after": ["<c-w>", "k"]
    },
    {
      "before": ["<leader>", "d"],
      "after": ["d", "d"]
    },
    {
      "before": ["<c-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["<leader>", "s"],
      "commands": [":w"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      "before": ["<space>"],
      "after": ["@", "q"]
    },
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<c-r>"],
      "commands": ["redo"]
    },
    {
      "before": ["<leader>", "a"],
      "after": ["g", "g", "V", "G"]
    },
    // -- visual lines - Move using visual lines.
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    // -- visual lines - end
    {
      // Use `s` to trigger easymotion full search.
      "before": ["s"],
      "after": ["leader", "leader", "s"]
    },
    {
      "before": ["<c-a>"],
      "after": ["gg", "V", "G"]
    },
    {
      "before": ["<c-p>"],
      "commands": ["workbench.action.quickOpen"]
    },
    {
      "before": ["<c-shift-r>"],
      "commands": ["jupyter.restartkernel"]
    },

    // --- calva keybindings - making them more conjure-ish
    {
      // evaluates current form
      // default: ctrl+enter
      "before": [" ", "e", "e"],
      "commands": ["calva.evaluateSelection"]
    },
    {
      // evaluates current top level form
      // default: alt+enter
      "before": [" ", "e", "r"],
      "commands": ["calva.evaluateCurrentTopLevelForm"]
    },
    {
      "before": [" ", "e", "c", "e"],
      "commands": ["calva.evaluateSelectionAsComment"]
    },
    {
      "before": [" ", "e", "c", "r"],
      "commands": ["calva.evaluateTopLevelFormAsComment"]
    },
    {
      "before": [" ", "e", "b"],
      "commands": ["calva.loadFile"]
    },
    {
      "before": ["<a-i>"],
      "commands": ["editor.action.showHover"]
    },
    {
      "before": ["K"],
      "commands": ["calva.printClojureDocsToOutputWindow"]
    },
    {
      "before": [" ", "d", "$"],
      "commands": ["paredit.killListForward"]
    },
    {
      "before": [" ", "d", "0"],
      "commands": ["paredit.killListBackward"]
    },
    {
      "before": [" ", "d", "w"],
      "commands": ["paredit.spliceSexpKillForward"]
    },
    {
      "before": [" ", "d", "b"],
      "commands": ["paredit.spliceSexpKillBackward"]
    },
    {
      // save and stay in insert mode
      "before": ["<leader>", "w"],
      "commands": [":w"],
      "after": ["<esc>a"]
    },
    {
      // try to quit without saving
      "before": ["<leader>", "q"],
      "commands": [":q"]
    },
    {
      // save and quit
      "before": ["<leader>", "x"],
      "commands": [":x"]
    },
    // --- calva keybindings end

    // The following three commands are mimicking the behavior of Vimium. First
    // one is actually to keep the default J behavior somewhere.
    // {
    //   "before": ["g", "j"],
    //   "after": ["J"]
    // },
    // {
    //   "before": ["J"],
    //   "commands": [":tabp"]
    // },
    // {
    //   "before": ["K"],
    //   "commands": [":tabn"]
    // }
    // {
    //   "before": ["<c-t>"],
    //   "commands": ["workbench.action.showAllSymbols"]
    // },
    {
      "before": ["<c-b>"],
      "commands": [""]
    },
    {
      "before": ["|"],
      "commands": ["workbench.action.splitEditor"]
    },
    {
      "before": ["-"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    {
      "before": ["g", "e"],
      "commands": ["editor.action.marker.nextInFiles"]
    },
    {
      "before": ["g", "E"],
      "commands": ["editor.action.marker.prevInFiles"]
    }
    // {
    //   "before": ["/"],
    //   "commands": ["actions.find"]
    // }
  ],
  // vimnormal-

  // -vimvisual
  "vim.visualModeKeyBindingsNonRecursive": [
    // -- visual lines - Move using visual lines.
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    // -- visual lines - end
    {
      // Save and leave visual mode.
      "before": ["<leader>", "s"],
      "commands": [":w"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "x"],
      "commands": [":x"],
      "after": ["<esc>"]
    },
    {
      "before": ["<leader>", "q"],
      "commands": [":q"],
      "after": ["<esc>"]
    },
    // Prevents `p` from yanking text that is being overwriten. When that
    // behavior is desired, use `gp`.
    {
      "before": ["g", "p"],
      "after": ["p"]
    },
    {
      "before": ["p"],
      "after": ["\"", "_", "d", "P"]
    },
    {
      // search for all occurences of the selected text
      "before": ["/", "/"],
      "after": ["y", "/", "<c-r>", "*", "<cr>"]
    }
    // {
    //   "before": [" ", "E"],
    //   "commands": ["calva.evaluateSelectionToSelectionEnd"]
    // },
  ],
  // vimvisual-

  //
  //
  // Snippets
  //

  "[snippets]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },

  //
  //
  // Emmet
  //

  "emmet.triggerExpansionOnTab": true,
  "emmet.showExpandedAbbreviation": "never",
  "emmet.showSuggestionsAsSnippets": false,
  "emmet.includeLanguages": {
    "erb": "html",
    "svelte": "html"
  },

  //
  //
  // Copilot
  //

  "github.copilot.editor.enableAutoCompletions": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false
  },

  //
  //
  // Misc tools
  //

  // TODO: figure out from what extension this comes from. Perhaps the Dev
  // Container one.
  "remoteHub.commitDirectlyWarning": "off",

  // From Nx plugin.
  "nxConsole.enableTelemetry": false,

  "[aspnetcorerazor]": {
    "editor.defaultFormatter": "ms-dotnettools.csharp"
  },
  "polyglot-notebook.defaultNotebookLanguage": "fsharp",

  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },

  //
  // Next tool setting above.
  // #endregion
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // All editor, workspace, terminal, etc, settings.
  // #region

  //
  //
  // Misc
  //
  // Random one-off settings that doesn't make sense to put in a separate
  // category.
  //

  "telemetry.telemetryLevel": "off",
  "problems.showCurrentInStatus": true,
  "scm.diffDecorationsGutterWidth": 5,
  "diffEditor.renderSideBySide": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "outline.collapseItems": "alwaysCollapse",
  "notebook.lineNumbers": "on",
  "html.suggest.html5": false,
  "[log][Log]": {
    "editor.fontFamily": "JetBrains Mono",
    "editor.fontSize": 11,
    "editor.fontWeight": "400",
    "editor.fontLigatures": "'ss02', 'ss19', 'ss20', 'zero', 'cv03', 'cv04', 'cv16', 'cv19', 'cv20', 'cv99'"
  },

  //
  //
  // #region Editor
  //

  // CodeNewRoman font
  //
  "editor.fontFamily": "CodeNewRoman Nerd Font",
  "editor.fontSize": 13,
  "editor.fontWeight": "normal", // edn{:desktop "bold" :notebook "??" :small "??"}

  // Cascadia Code font
  //
  // "editor.fontFamily": "Cascadia Code NF",
  // "editor.fontSize": 13, // edn{:desktop 13 :notebook 19 :small 11}
  // "editor.fontWeight": "300", // edn{:desktop "300" :notebook "300" :small "100"}
  // "editor.fontLigatures": "'ss01', 'ss19', 'ss20', 'calt' 0",
  // // Available stylistic sets:
  // // - cursive italics: 'ss01'
  // // - alternate not equal: 'ss02' ~= (appears as !=)
  // // - serbian locl forms (italic only): 'ss03'
  // // - slashed zero: 'ss19'
  // // - graphical control characters: 'ss20'
  // // Ligature test:
  // //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  // //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " Â´ ` Ëœ
  // //  => -> <> <= >= != !== === ~= |> <- --> || .- :- .= {..}

  // Fira Code font
  //
  // "editor.fontFamily": "Fira Code",
  // "editor.fontSize": 13, // edn{:desktop 15 :notebook ?? :small 11}
  // "editor.fontWeight": "100", // edn{:desktop "400" :notebook "??" :small "100"}
  // "editor.fontLigatures": "'calt' 0, 'cv01', 'cv02', 'cv05', 'cv09', 'ss05', 'ss03', 'cv16', 'cv30', 'cv25', 'cv26', 'cv32', 'cv28', 'ss10', 'cv14', 'cv12'",
  // // Available stylistic sets:
  // // - | cv01: a      | cv02: g  | cv03...06: i | cv07..10: l | ss01: r
  // // - | zero: dot    | cv11..13: empty zero, reverse dashed zero, long dot zero
  // // - | cv14: 3      | onum: numbers not middle aligned      | cv17: ~ height
  // // - | ss05: @      | ss04: $  | cv18: %      | ss03: &     | cv15..16: *
  // // - | cv31: ()     | cv29: {} | cv30: longer vertical bar  | ss02: <= >=
  // // - | cv19..20: <= | cv23: >= | cv21..22: =< | ss08: == === != !==
  // // - | cv24: /=     | ss09: >>= <<= ||= |=    | cv25: .-    | cv26: :-
  // // - | cv32: .=     | cv27: [] | cv28: {..}   | ss06: \\    | ss07: =~ !~
  // // - | ss10: Fl Tl fi fj fl ft
  // // Ligature test:
  // //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  // //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " Â´ ` Ëœ
  // //  => -> <> <= >= != !== === ~= |> <- --> || .- :- .= {..}

  // DM Mono
  //
  // "editor.fontFamily": "DM Mono",
  // "editor.fontSize": 14, // edn{:desktop 15 :notebook ?? :small 11}
  // "editor.fontWeight": "300", // edn{:desktop "300" :notebook "??" :small "100"}
  // "editor.fontLigatures": "'ss01','ss03','ss04'",
  // // Available stylistic sets:
  // // ss01: curved comma; ss02: curved a; ss03: curved g; ss04: less rounded
  // // numbers; ss05: remove rounded borders of f;

  // Source Code Pro
  //
  // "editor.fontFamily": "SourceCodeVF",
  // "editor.fontSize": 15, // edn{:desktop 15 :notebook ?? :small 11}
  // "editor.fontWeight": "400", // edn{:desktop "400" :notebook "??" :small "100"}
  // "editor.fontLigatures": "'cv17','cv01','cv02','zero'",
  // // Available stylistic sets:
  // // - | cv17: improved 1 | cv01 and cv02: clearer 'a' and 'g' |
  // // - | zero: reverse dashed zero

  // JetBrainsMono font
  //
  // "editor.fontFamily": "JetBrains Mono",
  // "editor.fontSize": 11, // edn{:desktop 13 :notebook ?? :small 11}
  // "editor.fontWeight": "400", // edn{:desktop "200" :notebook "??" :small "100"}
  // // Minimal.
  // "editor.fontLigatures": "'ss01', 'ss19', 'ss20', 'zero', 'cv99'",
  // // Very different from the default.
  // "editor.fontLigatures": "'ss02', 'ss19', 'ss20', 'zero', 'cv03', 'cv04', 'cv16', 'cv19', 'cv20', 'cv99'",
  // // Available stylistic sets:
  // // - | cv01,05: l | cv02: t | cv03: g | cv04: j | cv06: m  | cv07: w | cv08: k
  // // - | cv09,17: f | cv10: r | cv11: y | cv12: u | cv14: $Â¢ | cv15: & | cv16: Q
  // // - | cv18: 269  | cv19: 8 | cv20: 5 | cv99: bg inverted color to
  // //                                            differentiate some gliphs
  // // - ss01: classic construction
  // // - ss02: closed construction
  // // - ss19: broken equals ligatures (yay!)
  // // - ss20: raised bar f
  // // - zero: slashed zero
  // // - frac: fractions
  // // Ligature test:
  // //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  // //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " Â´ ` Ëœ
  // //  => -> <> <= >= != !== === ~= |> <- --> || .- :- .= {..} 1/2 3/8 100/48

  // Noto Sans Mono font
  //
  // "editor.fontFamily": "Noto Sans Mono",
  // "editor.fontSize": 13, // edn{:desktop 13 :notebook ?? :small 11}
  // "editor.fontWeight": "400", // edn{:desktop "200" :notebook "??" :small "100"}

  // Geist Mono font
  //
  // "editor.fontFamily": "Geist Mono",
  // "editor.fontSize": 13, // edn{:desktop 13 :notebook ?? :small 11}
  // "editor.fontWeight": "400", // edn{:desktop "400" :notebook "??" :small "100"}
  // "editor.fontLigatures": "'ss02', 'ss03', 'ss06', 'ss13', 'liga' 0",
  // // Available stylistic sets:
  // // - | ss01: normal | ss02: circular a | ss03: non-1-like l |
  // // - | ss06: circular uppercase G      | ss08: compact (semi) colon
  // // - | ss09: non slashed zero          |
  // // Ligature test:
  // //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  // //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " Â´ ` Ëœ
  // //  => -> <> <= >= != !== === ~= |> <- --> || .- :- .= {..}

  // Recursive font
  //
  // "editor.fontFamily": "Recursive",
  // "editor.fontSize": 13, // edn{:desktop 13 :notebook ?? :small 11}
  // "editor.fontWeight": "400", // edn{:desktop "400" :notebook "??" :small "100"}
  // // Recursive with default values and almost no customization.
  // "editor.fontLigatures": "'frac'",
  // // Some customizations that I like. See details below.
  // "editor.fontLigatures": "'ss01', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'ss07', 'ss11', 'ss12', 'case', 'frac'",
  // // - dlig: ligatures - => && === ff it ti (more below)
  // // - ss01: a | ss02: g | ss03: f | ss04: i | ss05: l | ss06: r
  // // - ss07: simplified italic diagonals - kwxyz | ss08: no-serif on L and Z
  // // - ss09: less rounded six and nine - 6 9 | ss10: dotted zero
  // // - ss11: 1 without the bottom line | ss12: simpler @
  // // - case: uppercase punctuation (put punctuation around mid-line)
  // // - frac: contextual fractions - 1/2 3/4 9/74
  // // - afrc: alternative fractions | ordn: ordinals - 1.o 8.a
  // // - titl: Q leg to the right instead of down
  // // - sups, numr: superior/numerators - H0123456789
  // // - sinf, dnom: inferior/denominators
  // // Ligature test:
  // //  ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { | } ~
  // //  ~ < > = + _ _ ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " Â´ ` Ëœ
  // //  => -> <> <= >= != !== === ~= |> <- --> || .- :- .= {..}

  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll": "explicit"
  },
  "editor.lineNumbers": "off",
  "editor.parameterHints.enabled": false,
  "editor.guides.bracketPairs": "active",
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.indentation": true,
  "editor.guides.highlightActiveIndentation": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.detectIndentation": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.cursorStyle": "line-thin",
  "editor.cursorBlinking": "smooth",
  "editor.rulers": [80, 100, 120],
  "editor.minimap.maxColumn": 30,
  "editor.minimap.renderCharacters": false,
  "editor.minimap.showSlider": "always",
  "editor.minimap.size": "fill",
  "editor.minimap.autohide": false,
  "editor.minimap.side": "right",
  "editor.minimap.scale": 1,
  "editor.formatOnSave": true,
  "editor.tabCompletion": "onlySnippets",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.quickSuggestions": {
    "other": "off",
    "comments": "off",
    "strings": "off"
  },
  "editor.renderWhitespace": "none",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.hover.delay": 1000,
  "editor.inlineSuggest.enabled": true,
  "editor.wordWrap": "bounded",
  "editor.wrappingIndent": "deepIndent",
  "editor.wordWrapColumn": 120,
  "editor.lineHeight": 0, // Interesting values: 1.6; 2; 2.2
  // "editor.letterSpacing": -0.8,
  "editor.roundedSelection": false,
  "editor.autoIndent": "full",
  "editor.screenReaderAnnounceInlineSuggestion": false,
  "editor.snippetSuggestions": "inline",
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.renderLineHighlight": "all",
  "editor.scrollbar.vertical": "hidden",
  "editor.scrollbar.horizontal": "hidden",

  // #endregion

  //
  //
  // Explorer
  //

  "explorer.openEditors.visible": 1,
  "explorer.confirmDragAndDrop": false,
  "explorer.excludeGitIgnore": false,

  // Nest some files in the explorer.
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.patterns": {
    ".vscode.md": "eslint*, .eslint*, .eslintignore, prettier*, .prettier*, .prettierignore, tsconfig*, .editorconfig, .gitattributes, .gitignore, LICENSE*, .env*, README*",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, pnpm-workspace.yaml, deno.json, deno.lock"
  },

  //
  //
  // Files
  //

  "files.associations": {
    "*.erb": "erb",
    "*.css": "css",
    "vimrc": "vimrc",
    "json5": "jsonc",
    "*.liquid": "html",
    "*.mdx": "markdown",
    "*.svg": "html",
    "*.adoc": "asciidoc",
    "*.vue": "vue"
  },

  "files.eol": "\n",

  //
  //
  // Git and GitLens
  //

  "git.ignoreMissingGitWarning": true,
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",

  "gitlens.defaultDateLocale": "pt-BR",
  "gitlens.defaultDateStyle": "absolute",
  "gitlens.defaultDateFormat": "DDMMMYY HH:mm",
  "gitlens.defaultDateShortFormat": "DDMMMYY",
  "gitlens.views.searchAndCompare.pullRequests.showForCommits": false,
  "gitlens.views.searchAndCompare.pullRequests.enabled": false,
  "gitlens.views.contributors.pullRequests.showForCommits": false,
  "gitlens.views.contributors.pullRequests.enabled": false,
  "gitlens.views.worktrees.pullRequests.showForCommits": false,
  "gitlens.views.worktrees.pullRequests.showForBranches": false,
  "gitlens.views.worktrees.pullRequests.enabled": false,
  "gitlens.views.remotes.pullRequests.showForCommits": false,
  "gitlens.views.remotes.pullRequests.showForBranches": false,
  "gitlens.views.remotes.pullRequests.enabled": false,
  "gitlens.views.branches.pullRequests.showForCommits": false,
  "gitlens.views.branches.pullRequests.showForBranches": false,
  "gitlens.views.branches.pullRequests.enabled": false,
  "gitlens.views.repositories.pullRequests.showForCommits": false,
  "gitlens.views.repositories.pullRequests.showForBranches": false,
  "gitlens.views.repositories.pullRequests.enabled": false,
  "gitlens.views.commits.pullRequests.showForBranches": false,
  "gitlens.views.commits.pullRequests.enabled": false,
  "gitlens.hovers.autolinks.enhanced": false,
  "gitlens.hovers.pullRequests.enabled": false,
  "gitlens.hovers.enabled": false,
  "gitlens.statusBar.pullRequests.enabled": false,
  "gitlens.currentLine.pullRequests.enabled": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.views.commits.pullRequests.showForCommits": false,
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.codeLens.recentChange.enabled": false,
  "gitlens.telemetry.enabled": false,

  //
  //
  // Terminal
  //

  "terminal.integrated.fontFamily": "'JetBrains Mono', 'Recursive', 'Geist Mono', 'CodeNewRoman Nerd Font', 'MesloLGS Nerd Font', 'MesloLGS NF', monospace",
  "terminal.integrated.tabs.enabled": true,
  "terminal.integrated.fontSize": 11, // edn{:desktop 13 :notebook 19}
  "terminal.integrated.fontWeight": "600",
  // "terminal.integrated.lineHeight": 1.6, // Also good values: 1.6; 2
  // "terminal.integrated.letterSpacing": 1,
  "terminal.integrated.macOptionClickForcesSelection": true,
  "terminal.integrated.allowChords": false,
  // "terminal.integrated.sendKeybindingsToShell": false,
  // "terminal.integrated.commandsToSkipShell": [
  //   "workbench.action.toggleMaximizedPanel"
  // ],
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.drawBoldTextInBrightColors": true,
  "terminal.integrated.minimumContrastRatio": 1,
  "terminal.integrated.enableVisualBell": true,
  "terminal.integrated.bellDuration": 3000,

  // cursor
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.cursorStyleInactive": "outline",
  "terminal.integrated.cursorWidth": 1,
  "terminal.integrated.cursorBlinking": true,

  //
  //
  // Window
  //

  "window.title": "${dirty}${activeEditorLong}${separator}${appName}",
  "window.newWindowDimensions": "inherit",
  "window.restoreWindows": "none",

  //
  //
  // Search
  //

  "search.defaultViewMode": "tree",
  "search.mode": "newEditor",
  "search.searchOnTypeDebouncePeriod": 500,
  "search.showLineNumbers": true,
  "search.smartCase": true,
  "search.exclude": {
    // Other stuff.
    "**/.archives": true,
    "**/.vscode": true,
    "**/dist/": true,

    // Clojure.
    "**/.calva/": true,
    "**/.clj-kondo/": true,
    "**/.lsp/": true,
    "**/target/": true,
    "**/out/": true,

    // VSCode defaults (as of 2oct24).
    "**/node_modules": true,
    "**/bower_components": true,
    "**/*.code-search": true
  },

  //
  //
  // Workbench
  //

  "workbench.colorCustomizations": {
    // cursor
    // "terminalCursor.foreground": "#000", // edn{:dark "#eeff00" :light "#000"}
    // "terminalCursor.background": "#eeff00", // edn{:dark "#000" :light "#eeff00"}

    // // guides
    // "tree.indentGuidesStroke": "#0084ff",
    // "tree.inactiveIndentGuidesStroke": "#555", // edn{:dark "#444" :light "#d8d8d8" "GitHub Dark" "#555"}
    "editorIndentGuide.activeBackground1": "#555d", // edn{:dark "#ff00c8" :light "#00ffff"}
    "editorIndentGuide.background1": "#5551", // edn{:dark "#555" :light "#ccc" "GitHub Dark" "#555" "Solarized Light" "#ccc" }

    // // line height
    "editor.lineHighlightBorder": "#ff00c833", // edn{:dark "#ff00c833" :light "#00ffff22"}
    "editor.lineHighlightBackground": "#ff00c815" // edn{:dark "#ff00c822" :light "#00ffff22"}

    // // selection
    // // TODO: figure out how to get this working.
    // // "editor.selectionForeground": "#ff00c8" // edn{:dark "#ff00c8" :light "#fff"}
    // "editor.selectionBackground": "#ff00c855", // edn{:dark "#ff00c855" :light "#00ffff77"}
    // "editor.selectionHighlightBorder": "#ffffff81", // edn{:dark "#ffffff81" :light "#ffffffdd"}
    // "editor.selectionHighlightBackground": "#ffffff36", // edn{:dark "#ffffff36" :light "#ffffff36"}

    // // word and search match highlight
    // "editor.wordHighlightBorder": "#ffffff66", // edn{:dark "#ffffff66" :light "#00000033"}
    // "editor.wordHighlightBackground": "#00000066", // edn{:dark "#00000066" :light "#ffffff44"}
    // "editor.findMatchBackground": "#d400ff88", // edn{:dark "#d400ff88" :light "#000000e8"}
    // "editor.findMatchHighlightBackground": "#d400ff56", // edn{:dark "#d400ff56" :light "#d400ff56"}

    // // calva
    // "calva.inlineErrorForegroundColor": "#ff0000",
    // "calva.inlineForegroundColor": "#ff9000"
  },

  "workbench.startupEditor": "newUntitledFile",
  "workbench.tree.indent": 20,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.list.horizontalScrolling": true,
  "workbench.sideBar.location": "left",
  "workbench.panel.defaultLocation": "bottom",
  "json.schemas": [
    {
      // Chrome Extensions. Point to extension files in a workspace if this is not working
      // correctly.
      "fileMatch": ["manifest.json"],
      "url": "https://json.schemastore.org/chrome-manifest.json"
    }
  ],
  "workbench.colorTheme": "Dracula Theme",
  "window.newWindowProfile": "Default",
  "workbench.activityBar.location": "hidden",
  "window.menuBarVisibility": "toggle"

  //////////////////////////////////////////////////////////////////////////////
}

////////////////////////////////////////////////////////////////////////////////
// Some VSCode documentation that I consider relevant to keep here.
// #region
//

//
//
// Ligatures
//

//
// According to ChatGPT:
//
// ---
// In Visual Studio Code, the `editor.fontLigatures` option can be customized
// using an array of strings, each representing a specific typographic
// feature. Here are some common options:
//
// 1. **`liga`**: Standard ligatures.
// 2. **`dlig`**: Discretionary ligatures.
// 3. **`clig`**: Contextual ligatures.
// 4. **`hlig`**: Historical ligatures.
// 5. **`calt`**: Contextual alternates.
// 6. **`ss01`** to **`ss20`**: Stylistic sets.
// 7. **`salt`**: Stylistic alternates.
// 8. **`zero`**: Slashed zero.
//
// These options allow you to fine-tune which ligatures and typographic
// features are enabled in the editor.
//
// For more detailed information, refer to the OpenType feature tags:
//   https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist
//
// ---
//
// Seems to be possible to remove a particular ligature by using the ["-zero"]
// syntax.
//

//
// #endregion
////////////////////////////////////////////////////////////////////////////////
