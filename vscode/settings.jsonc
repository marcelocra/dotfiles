{
  "json.schemas": [
    {
      // Chrome Extensions' Manifest. Point to extension files in a workspace if
      // this is not working correctly.
      "fileMatch": ["manifest.json"],
      "url": "https://json.schemastore.org/chrome-manifest.json"
    },
    {
      // TypeScript.
      "fileMatch": ["tsconfig.json"],
      "url": "https://json.schemastore.org/tsconfig.json"
    }
  ],

  "js/ts.implicitProjectConfig.checkJs": true,
  "javascript.preferences.importModuleSpecifierEnding": "js",

  // // Causes deno extension to report import errors.
  // "typescript.tsserver.experimental.enableProjectDiagnostics": true,
  "typescript.preferences.importModuleSpecifier": "non-relative",

  "svelte.enable-ts-plugin": true,
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },

  "[astro]": {
    "editor.defaultFormatter": "astro-build.astro-vscode"
  },

  "eslint.enable": true,
  "eslint.format.enable": true,
  "eslint.probe": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "vue",
    "markdown",
    "svelte"
  ],
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],

  "[handlebars]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },

  "[jade]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },

  "tailwindCSS.emmetCompletions": false,
  "tailwindCSS.colorDecorators": true, // They are useful, though annoying.
  "tailwindCSS.experimental.classRegex": [
    // Always detect when wrapping strings with Tailwind-specific tagged
    // literals. You can define a simple identity function that receives a
    // tagged string literal as an argument and returns it.
    //
    // The function can be as simple as:
    //
    //    const tw = (string) => string;
    //
    // Or if you are using type annotations or TypeScript:
    //
    //    /**
    //     * Usage: tw`bg-red-500`
    //     *
    //     * @param {TemplateStringsArray} string
    //     */
    //    function tw(string) {
    //      return string;
    //    }
    //
    // The type annotation is useful because it will warn you if you use the
    // function without a template literal:
    //
    //    tw('bg-red-500')  //=> Argument of type 'string' is not assignable to
    //                      //=> parameter of type 'TemplateStringsArray'
    //
    "c`([^`]+)`",
    "tw`([^`]+)`",

    // Try to generalize.
    " [cC][lL][aA][sS][^\"'`]*[\"'`]([^\"'`]+)[\"'`]"

    // Old tries for this, kept here as a reference of what **might** work.
    //
    //
    // // For JS variables ending in [cC]lass.
    // "const.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    // "let.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    // "var.+[cC]lass =\\s+[\"']([^\"']*)[\"']",
    //
    //
    // // For JS objects with properties ending in [cC]lass.
    // ".*[cC]lass:\\s+[\"']([^\"']*)[\"']",
    //
    //
    // // For JS classList manipulation.
    // "\\.classList\\.[^\\(]*\\([\"']([^\"']*)[\"']\\)",
    //
    //
    // // For html-like attributes.
    // ".+[cC]lass=\"([^\"]*)\""
    //
    //
    // // For Clojure and Hiccup (not working).
    // ":class\\s+\"([^\"]*)\"",
    // ":([^\"]*)[cC]lass\"([^\"]*)\"",
    // ":[\\w-.#>]+\\.([\\w-]*)",
  ],

  "tailwindCSS.includeLanguages": {
    "clojure": "html",
    "vue": "html",
    "aspnetcorerazor": "html",
    "razor": "html",
    "*.razor": "html",
    "elm": "html"
  },

  "tailwindCSS.files.exclude": [
    "**/.git/**",
    "**/node_modules/**",
    "**/.hg/**",
    "**/.svn/**",
    "**/*.md"
  ],

  "emmet.triggerExpansionOnTab": true,
  "emmet.showExpandedAbbreviation": "inMarkupAndStylesheetFilesOnly",
  "emmet.showSuggestionsAsSnippets": true,
  "emmet.includeLanguages": {
    "erb": "html",
    "vue-html": "html",
    "svelte": "html"
  },
  "emmet.excludeLanguages": ["markdown"],

  "[nim][nimble]": {
    "editor.defaultFormatter": "NimLang.nimlang"
  },

  "vue.server.hybridMode": "typeScriptPluginOnly",
  "lit-html.tags": ["html", "css", "vue"],

  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml"
  },

  "[elm]": {
    "editor.defaultFormatter": "elmTooling.elm-ls-vscode"
  },

  "[clojure]": {
    // "editor.wordSeparators": "\t ()\"':,;~@#$%^&{}[]/-`.",
    "editor.autoClosingBrackets": "always",
    "editor.autoClosingOvertype": "always",
    "editor.autoClosingQuotes": "always",
    "editor.formatOnType": true,
    "editor.autoIndent": "full",
    "editor.formatOnPaste": true,
    "editor.matchBrackets": "never",
    "editor.guides.indentation": false,
    "editor.parameterHints.enabled": false,
    "editor.unicodeHighlight.allowedCharacters": {
      " ": true,
      "꞉": true
    },
    "editor.foldingStrategy": "indentation",
    "editor.defaultFormatter": "betterthantomorrow.calva"
  },

  "calva.paredit.defaultKeyMap": "original",
  "calva.replConnectSequences": [],
  "calva.showCalvaSaysOnStart": false,
  "calva.prettyPrintingOptions": {
    "printEngine": "pprint",
    "enabled": true,
    "width": 40
  },

  "dotnetAcquisitionExtension.enableTelemetry": false,

  "dotnetAcquisitionExtension.sharedExistingDotnetPath": "/home/marcelocra/bin/dotnet",
  "dotnetAcquisitionExtension.existingDotnetPath": [
    {
      "extensionId": "ms-azuretools.vscode-azure-github-copilot",
      // "path": "/home/marcelocra/bin/binaries/dotnet/dotnet-v9.0.102/dotnet"
      "path": "/home/marcelocra/bin/binaries/dotnet/dotnet-v8.0.405/dotnet"
    }
  ],

  "FSharp.smartIndent": true,
  "FSharp.inlayHints.parameterNames": false,
  "FSharp.inlayHints.typeAnnotations": false,
  "[fsharp]": {
    "editor.defaultFormatter": "Ionide.Ionide-fsharp"
  },
  "FSharp.addFsiWatcher": true,
  "FSharp.autoRevealInExplorer": "disabled",

  "[csharp]": {
    "editor.defaultFormatter": "ms-dotnettools.csharp"
  },
  "[aspnetcorerazor]": {
    "editor.defaultFormatter": "ms-dotnettools.csharp"
  },
  "csharp.suppressBuildAssetsNotification": true,

  "polyglot-notebook.defaultNotebookLanguage": "fsharp",
  "polyglot-notebook.defaultNotebookExtension": ".ipynb",
  "[polyglot-notebook]": {
    // Doesn't work right now: https://github.com/dotnet/interactive/issues/3449
    "editor.defaultFormatter": "Ionide.Ionide-fsharp"
  },

  "notebook.lineNumbers": "on",
  "notebook.output.scrolling": true,
  "notebook.formatOnSave.enabled": true,
  "notebook.showFoldingControls": "always",

  "jupyter.disableJupyterAutoStart": true,

  "python.REPL.enableREPLSmartSend": true,
  "python.REPL.sendToNativeREPL": true,
  "ruff.nativeServer": "on",

  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff"
  },

  "python.venvFolders": [".python-global-venv"],
  "python.terminal.activateEnvironment": true,

  "rubyLsp.rubyVersionManager": "asdf",

  "dart.openDevTools": "flutter",
  "dart.debugExternalPackageLibraries": false,
  "dart.debugSdkLibraries": false,
  "[dart]": {
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "editor.selectionHighlight": false,
    "editor.suggest.snippetsPreventQuickSuggestions": false,
    "editor.suggestSelection": "first",
    "editor.tabCompletion": "onlySnippets",
    "editor.wordBasedSuggestions": "off",
    "editor.defaultFormatter": "Dart-Code.dart-code"
  },

  "C_Cpp.clang_format_fallbackStyle": "Google",
  "C_Cpp.clang_format_sortIncludes": true,
  "C_Cpp.clang_format_style": "Google",
  "[cpp]": {
    "editor.defaultFormatter": "ms-vscode.cpptools"
  },

  "haskell.manageHLS": "GHCup",

  "go.formatTool": "goimports",
  "[go][go.mod][go.sum][gotmpl][go.work]": {
    "editor.defaultFormatter": "golang.go"
  },

  "[markdown]": {
    // "editor.tabSize": 2,
    // "editor.insertSpaces": true,
    // "editor.autoClosingBrackets": "never"
  },

  "[asciidoc]": {
    // "editor.rulers": [80, 100, 120]
  },

  "asciidoc.antora.enableAntoraSupport": false,

  "[shellscript]": {
    "editor.quickSuggestions": {
      "other": "on",
      "comments": "on",
      "strings": "on"
    }
  },

  "zig.path": "zig",
  "zig.zls.path": "zls",

  "[ocaml]": {
    "editor.defaultFormatter": "ocamllabs.ocaml-platform"
  },

  "[snippets]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },

  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": true,
    "scminput": false
  },
  "chat.agent.": true,

  // TODO: figure out from what extension this comes from. Perhaps the Dev
  // Container one.
  "remoteHub.commitDirectlyWarning": "off",

  // From Nx plugin.
  "nxConsole.enableTelemetry": false,

  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },

  // #region editor. {{{

  //----------------------------------------------------------------------------
  // Programming fonts and their settings
  //----------------------------------------------------------------------------

  // // IBM Plex Mono
  // // -------------
  // "editor.fontFamily": "IBM Plex Mono",
  // "editor.fontLigatures": "'zero'",

  // // CodeNewRoman
  // // ------------
  "editor.fontFamily": "CodeNewRoman Nerd Font Mono",

  // // Cascadia Code
  // // -------------
  // "editor.fontFamily": "Cascadia Code NF",
  // 'calt' and 'cv01' 3 were here, don't know why... don't seem to do anything.
  // "editor.fontLigatures": "'ss01', 'ss19', 'ss20'",
  // Available stylistic sets:
  //    cursive italics: 'ss01', alternate not equal: 'ss02' ~= (appears as !=),
  //    serbian locl forms (italic only): 'ss03', slashed zero: 'ss19',
  //    graphical control characters: 'ss20'
  // To test:
  //    ! " # $ % & ' ( ) * + , - . / : ; < = > ? @ [ \ ] ^ _ ` { } ~ < > = + _
  //    ( ) * & ^ % $ # @ ! { } [ ] \ | / ? : ; , . ` ' " ´ ` ˜ => -> <> <= >=
  //    != !== === ~= |> <- --> || .- :- .= {..}

  // // DM Mono
  // // -------
  // "editor.fontFamily": "DM Mono",
  // "editor.fontLigatures": "'ss01','ss03','ss04'",
  // Available stylistic sets:
  //    ss01: curved comma, ss02: curved a, ss03: curved g, ss04: less rounded
  //    numbers, ss05: remove rounded borders of f

  // // Source Code Pro
  // // ---------------
  // "editor.fontFamily": "SourceCodeVF",
  // "editor.letterSpacing": -0.4,
  // // "editor.fontLigatures": "'cv17', 'zero'",
  // "editor.fontLigatures": "'cv01', 'cv02', 'cv17', 'zero'",
  // Available stylistic sets:
  //    cv01 and cv02: clearer 'a' and 'g', cv08: alternate &, cv09: alternate @
  //    cv17: improved 1, zero: reverse dashed zero

  // // JetBrains Mono
  // // --------------
  // "editor.fontFamily": "JetBrainsMono Nerd Font",
  // Minimal (Fira Code like):
  // "editor.fontLigatures": "'ss01', 'ss19', 'ss20', 'zero', 'cv99'",
  // Very different (Ubuntu Mono like):
  //    closed construction set (ss02), alternative ligatures for g (03), j
  //    (04), Q (16), 269 (18), 8 (19), 5 (20), and some inverted color
  //    ligatures (99).
  // "editor.fontLigatures": "'ss02', 'ss19', 'ss20', 'zero', 'cv03', 'cv04', 'cv16', 'cv18', 'cv19', 'cv20', 'cv99'",
  // Available stylistic sets:
  //    cv01,05: l, cv02: t, cv03: g, cv04: j, cv06: m , cv07: w, cv08: k,
  //    cv09,17: f, cv10: r, cv11: y, cv12: u, cv14: $¢, cv15: &, cv16: Q, cv18:
  //    269 , cv19: 8, cv20: 5, cv99: bg inverted color to differentiate some
  //    gliphs, ss01: classic construction, ss02: closed construction, ss19:
  //    broken equals ligatures (yay!), ss20: raised bar f, zero: slashed zero,
  //    frac: fractions

  // // Geist Mono
  // // ----------
  // "editor.fontFamily": "Geist Mono",
  // "editor.fontLigatures": "'ss02', 'ss03', 'ss06', 'ss13', 'liga' 0",
  // Available stylistic sets:
  //    ss01: normal, ss02: circular a, ss03: non-1-like l, ss06: circular
  //    uppercase G, ss08: compact (semi) colon, ss09: non slashed zero

  // // Recursive Mono
  // // --------------
  // "editor.fontFamily": "Recursive",
  // Some customizations that I like (details below).
  // "editor.fontLigatures": "true",
  // "editor.fontLigatures": "'ss01', 'ss02', 'ss03', 'ss04', 'ss05', 'ss06', 'ss07', 'ss11', 'ss12', 'case', 'frac' 0",
  // "editor.fontLigatures": "'ss04', 'ss05', 'ss12', 'case', 'frac' 0",
  // Available stylistic sets:
  //    dlig: ligatures - => && === ff it ti (more below), ss01: a, ss02: g,
  //    ss03: f, ss04: i, ss05: l, ss06: r, ss07: simplified italic diagonals -
  //    kwxyz, ss08: no-serif on L and Z, ss09: less rounded six and nine - 6 9,
  //    ss10: dotted zero, ss11: 1 without the bottom line, ss12: simpler @,
  //    case: uppercase punctuation (put punctuation around mid-line), frac:
  //    contextual fractions - 1/2 3/4 9/74, afrc: alternative fractions, ordn:
  //    ordinals - 1.o 8.a, titl: Q leg to the right instead of down, sups,
  //    numr: superior/numerators - H0123456789, sinf, dnom:
  //    inferior/denominators

  // // Iosevka
  // // -------
  // "editor.fontFamily": "Iosevka Fixed Extended",
  // // Source Code Pro, with changes to: 1, 4, 0, l (lowercase L).
  // "editor.fontLigatures": "'ss09', 'cv01' 3, 'cv04' 5, 'cv10' 4, 'cv47' 8",
  // // Monaco.
  // "editor.fontLigatures": "'ss17'",
  // // Lucida, with changes to: 2, 4, 5, 0, *, ', #, $, %, ?.
  // "editor.fontLigatures": "'ss13', 'cv02' 4, 'cv04' 11, 'cv05' 8, 'cv10' 10, 'VSAB' 6, 'VSAF' 2, 'VSAJ' 4, 'VSAM' 1, 'VSAO' 1, 'VSAQ' 3",
  // Other:
  //    cv02: change 2, cv04: change 4, cv05: change 5, cv10: change 0, cv47:
  //    change l, VSAB: * position (top, middle, bottom), VSAF: ' (straight,
  //    curved), VSAJ: #, VSAM: $, VSAO: %, VSAQ: ?, ss01: Andale Mono, ss02:
  //    Anonymous Pro, ss03: Consolas, ss04: Menlo, ss05: Fira Mono, ss06:
  //    Liberation Mono, ss07: Monaco, ss08: Pragmata Pro, ss09: Source Code
  //    Pro, ss10: Envy Code R, ss11: X Window, ss12: Ubuntu Mono, ss13: Lucida,
  //    ss14: JetBrains Mono, ss15: IBM Plex Mono, ss16: PT Mono, ss17:
  //    Recursive Mono, ss18: Input Mono, ss20: Curly

  // // Victor Mono
  // // --------------
  // "editor.fontFamily": "Victor Mono",
  // "editor.fontLigatures": "'ss01', 'ss02', 'ss07', 'ss08'",
  // "editor.fontLigatures": "'calt' 0, 'ss01', 'ss02', 'ss06', 'ss07', 'ss08'",
  // Available stylistic sets:
  //    calt=0: no ligatures (particularly for `==` and `!=`, but also disable
  //    for ff fi il re tl ke), ss01: different 'a', ss02: different dashed zero
  //    (up to ss05), ss06: crossed '7', ss07: different '6' and  '9', ss08:
  //    more fish-like stuff (::<)

  // "editor.fontFamily": "BlexMono Nerd Font",
  // // "editor.fontLigatures": "'ss01', 'ss02', 'zero'",
  // "editor.fontLigatures": "'zero'",
  // Available stylistic sets:
  //    calt=0: no ligatures (particularly for `==` and `!=`, but also disable
  //    for ff fi il re tl ke), ss01: different 'a', ss02: different dashed zero
  //    (up to ss05), ss06: crossed '7', ss07: different '6' and  '9', ss08:
  //    more fish-like stuff (::<)

  // // Hack
  // // ----
  // "editor.fontFamily": "Hack Nerd Font",
  // Available stylistic sets:
  //    calt=0: no ligatures (particularly for `==` and `!=`, but also disable
  //    for ff fi il re tl ke), ss01: different 'a', ss02: different dashed zero
  //    (up to ss05), ss06: crossed '7', ss07: different '6' and  '9', ss08:
  //    more fish-like stuff (::<)

  // // Monoid
  // // ------
  // "editor.fontFamily": "Monoid",
  // "editor.fontSize": 13,
  // "editor.fontWeight": "normal",
  // "editor.fontLigatures": "'calt' 1, 'liga' 0, 'ss01' 0, 'ss02' 0, 'ss03' 0, 'ss04' 0, 'ss05' 1, 'ss06' 0, 'ss07' 1, 'ss08' 1, 'ss09' 1, 'ss10' 0, 'ss11' 0, 'ss12' 0, 'ss13' 0, 'ss14' 0, 'ss15' 0",

  // Monaspace
  // ---------
  // Docs: https://github.com/githubnext/monaspace#character-variants
  // "editor.fontFamily": "Monaspace Neon Var",
  // "editor.fontSize": 15,
  // "editor.fontWeight": "400",
  // "editor.fontLigatures": "'calt' 1, 'liga' 0, 'ss01' 0, 'ss02' 0, 'ss03' 1, 'ss04' 0, 'ss05' 0, 'ss06' 0, 'ss07' 0, 'ss08' 0, 'ss09' 0, 'ss10' 0, 'cv01' 3, 'cv02' 0, 'cv10' 1, 'cv11' 0, 'cv30' 0, 'cv31' 0, 'cv62' 0",

  // cv01-cv09: figure variants
  //  - cv01: 0 alternates: 1: plain 2: slash 3: reverse slash 4: cut-out slash
  //  - cv02: 1 alternate (no serif)
  // cv10-cv29: letter variants
  //  - cv10: l i alternates (Neon, Argon, Xenon, Radon)
  //  - cv11: j f r t alternates (Neon, Argon)
  // cv30-cv59: symbol variants
  //  - cv30: * vertically aligned closer to the top of the space
  //  - cv31: * 6-pointed asterisk
  //  - cv32: ≥ ≤ angled lower line
  // cv60-cv79: optional ligatures
  //  - cv60: forces the <= pair to render in a fashion that matches => instead
  //          of swapping for ≤.
  //  - cv61: enables the optional closed square ligature for []. This can be
  //          distracting
  //  - cv62: @_ ligature
  // cv80-cv99: reserved for future use

  // ss01: ligatures related to the equals glyph like != and ===.
  // ss02: ligatures for greater/less or equal (<=, >=).
  // ss03: ligatures related to arrows like -> and ~>.
  // ss04: ligatures related to markup, like </ and />.
  // ss05: ligatures related to the F# programming language, like |>.
  // ss06: ligatures related to repeated uses of ###, +++, and &&&.
  // ss07: ligatures related to colons like :: or =:=.
  // ss08: ligatures related to combinations of periods with other glyphs like ..= or .-.
  // ss09: ligatures related to combinations of the greater/less than and equals signs, like <=>,>>, and =<<.
  // ss10: other tags, like #[ and #(

  // // Random
  // // ------
  // "editor.fontFamily": "'Maple Mono', 'Monaspace Neon', 'IosevkaTermSlab Nerd Font', 'Iosevka Nerd Font', 'CodeNewRoman Nerd Font Mono', 'Reddit Mono', 'MesloLGS Nerd Font', 'M Plus 1 Code', 'RecMonoLinear Nerd Font', 'RecMonoDuotone Nerd Font', 'Hack Nerd Font', 'Geist Mono', Iosevka, monospace",
  // "editor.fontSize": 17,
  // "editor.fontWeight": "normal",
  // "editor.fontLigatures": "",

  "editor.tokenColorCustomizations": {
    // "[*Light*]": { // Match all themes with "Light" in the name.
    //   "textMateRules": [
    //     {
    //       "scope": "ref.matchtext",
    //       "settings": {
    //         "foreground": "#000"
    //       }
    //     }
    //   ]
    // },
    "[Spiral Tattoo Ink Dark Dim]": {
      "textMateRules": [
        // Test custom colors here, before moving to the theme.
        //
        // Example:
        //
        //    {
        //      "scope": "support",
        //      "settings": {
        //        "fontStyle": ""
        //      }
        //    },
        //    {
        //      "scope": "comment",
        //      "settings": {
        //        "fontStyle": "italic"
        //      }
        //    }
      ]
    },
    "[GitHub*]": {
      // Use italics for comments.
      "textMateRules": [
        {
          "scope": ["comment", "keyword"],
          "settings": {
            "fontStyle": "italic"
          }
        }
      ]
    }
  },
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll": "explicit",
    "source.organizeImports.ruff": "explicit"
    // "source.addMissingImports.ts": "always",
    // "source.removeUnusedImports": "always"
  },
  "editor.lineNumbers": "on",
  "zenMode.hideLineNumbers": false, // `editor.` related
  "editor.parameterHints.enabled": false,
  "editor.guides.bracketPairs": "active",
  "editor.bracketPairColorization.enabled": true,
  "editor.guides.indentation": false,
  "editor.guides.highlightActiveIndentation": true,
  "editor.semanticHighlighting.enabled": true,
  "editor.tabSize": 2,
  "editor.insertSpaces": true,
  "editor.detectIndentation": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",

  // Cursor.
  "editor.cursorStyle": "line",
  "editor.cursorWidth": 3,
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorBlinking": "blink",

  "editor.rulers": [80, 100, 120],
  "editor.formatOnSave": true,
  "editor.tabCompletion": "onlySnippets",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  "editor.quickSuggestions": {
    "other": "off",
    "comments": "off",
    "strings": "off"
  },
  "editor.renderWhitespace": "none",
  "editor.acceptSuggestionOnCommitCharacter": false,
  "editor.hover.delay": 1000,
  "editor.wordWrap": "bounded",
  "editor.wrappingIndent": "deepIndent",
  "editor.wordWrapColumn": 120,
  // "editor.lineHeight": 1.5, // Interesting values: 1.6; 1.8; 2; 2.2
  // The default letter spacing (i.e. commented next line) is good for most
  // fonts. It might be good for some fonts, so I'm keeping it here. Test for a
  // font and if it is good, move to that font section.
  // "editor.letterSpacing": -0.8,
  "editor.roundedSelection": false,
  "editor.autoIndent": "full",
  "editor.screenReaderAnnounceInlineSuggestion": false,
  "editor.snippetSuggestions": "bottom",
  "editor.suggest.showSnippets": false, // Avoid clutter in suggestions. I know my snippets by heart.
  "editor.suggest.matchOnWordStartOnly": false,
  "editor.suggest.showWords": true, // `words` means other words found in the file.
  "editor.suggestOnTriggerCharacters": true,
  "editor.acceptSuggestionOnEnter": "on",
  "editor.suggestSelection": "recentlyUsedByPrefix",
  "editor.multiCursorModifier": "ctrlCmd",
  "editor.renderLineHighlight": "all",
  "editor.scrollbar.vertical": "hidden",
  "editor.scrollbar.horizontal": "hidden",
  "editor.renderFinalNewline": "on",
  "editor.colorDecorators": true,
  "editor.glyphMargin": true, // Space between the explorer and the line number.
  "editor.mouseWheelZoom": true,
  "editor.minimap.showSlider": "always",
  "editor.inlineSuggest.enabled": true,
  "editor.accessibilitySupport": "off",
  "editor.showFoldingControls": "always",
  "editor.foldingHighlight": true,

  "editor.minimap.sectionHeaderLetterSpacing": 0,
  "editor.minimap.size": "fit",
  "editor.minimap.markSectionHeaderRegex": "\\bMARK:\\s*(?<separator>-?)\\s*(?<label>.*)$",
  "editor.minimap.showMarkSectionHeaders": true,
  "editor.minimap.showRegionSectionHeaders": true,

  "editor.inlineSuggest.fontFamily": "'CodeNewRoman Nerd Font', monospace",

  // Performance related.
  "extensions.experimental.affinity": {
    // "vscodevim.vim": 1,
    "asvetliakov.vscode-neovim": 1
  },

  // Next editor.

  // #endregion editor. }}}

  "explorer.openEditors.visible": 1,
  "explorer.confirmDragAndDrop": false,
  "explorer.excludeGitIgnore": false,
  "explorer.compactFolders": false,
  // Next explorer.

  // Disabling this for now, as I didn't really like it.
  // // Nest some files in the explorer.
  // "explorer.fileNesting.enabled": true,
  // "explorer.fileNesting.patterns": {
  //   ".vscode.md": "eslint*, .eslint*, .eslintignore, prettier*, .prettier*, .prettierignore, tsconfig*, .editorconfig, .gitattributes, .gitignore, LICENSE*, .env*, README*",
  //   "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml, bun.lockb, pnpm-workspace.yaml, deno.json, deno.lock"
  // },

  // prettier-ignore
  "files.associations": {
    "*.adoc": "asciidoc", "*.css": "css", "*.erb": "erb", "*.liquid": "html",
    "*.mdx": "markdown", "*.svg": "html", "*.svx": "markdown", "*.vue": "vue",
    "json5": "jsonc",

    // Add above this line (avoid the comma problem).
    "vimrc": "vimrc"
  },

  "files.eol": "\n",

  // #region Git and GitLens {{{

  "git.ignoreMissingGitWarning": true,
  "git.confirmSync": false,
  "git.openRepositoryInParentFolders": "never",

  "gitlens.defaultDateLocale": "pt-BR",
  "gitlens.defaultDateStyle": "absolute",
  "gitlens.defaultDateFormat": "DDMMMYY HH:mm",
  "gitlens.defaultDateShortFormat": "DDMMMYY",
  "gitlens.views.searchAndCompare.pullRequests.showForCommits": false,
  "gitlens.views.searchAndCompare.pullRequests.enabled": false,
  "gitlens.views.contributors.pullRequests.showForCommits": false,
  "gitlens.views.contributors.pullRequests.enabled": false,
  "gitlens.views.worktrees.pullRequests.showForCommits": false,
  "gitlens.views.worktrees.pullRequests.showForBranches": false,
  "gitlens.views.worktrees.pullRequests.enabled": false,
  "gitlens.views.remotes.pullRequests.showForCommits": false,
  "gitlens.views.remotes.pullRequests.showForBranches": false,
  "gitlens.views.remotes.pullRequests.enabled": false,
  "gitlens.views.branches.pullRequests.showForCommits": false,
  "gitlens.views.branches.pullRequests.showForBranches": false,
  "gitlens.views.branches.pullRequests.enabled": false,
  "gitlens.views.repositories.pullRequests.showForCommits": false,
  "gitlens.views.repositories.pullRequests.showForBranches": false,
  "gitlens.views.repositories.pullRequests.enabled": false,
  "gitlens.views.commits.pullRequests.showForBranches": false,
  "gitlens.views.commits.pullRequests.enabled": false,
  "gitlens.hovers.autolinks.enhanced": false,
  "gitlens.hovers.pullRequests.enabled": false,
  "gitlens.hovers.enabled": false,
  "gitlens.statusBar.pullRequests.enabled": false,
  "gitlens.currentLine.pullRequests.enabled": false,
  "gitlens.currentLine.enabled": false,
  "gitlens.views.commits.pullRequests.showForCommits": false,
  "gitlens.codeLens.authors.enabled": false,
  "gitlens.codeLens.recentChange.enabled": false,
  "gitlens.telemetry.enabled": false,

  // #endregion Git and GitLens }}}

  // #region terminal. {{{

  // Choose the main font and add fallbacks.
  "terminal.integrated.fontFamily": "'JetBrainsMono Nerd Font', 'MesloLGS Nerd Font', 'Hack Nerd Font', 'RecMonoLinear Nerd Font', 'BlexMono Nerd Font', 'Cascadia Code NF', 'JetBrainsMono NF', 'JetBrains Mono Nerd Font', 'JetBrains Mono NF', 'MesloLGM Nerd Font Mono', 'JetBrains Mono', 'Noto Sans Mono', 'Liberation Mono', 'DejaVu Sans Mono', monospace",
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.fontWeight": "400",
  "terminal.integrated.fontLigatures.enabled": true,
  // // IBM Plex Mono features:
  // "terminal.integrated.fontLigatures.featureSettings": "'zero', 'ss01', 'ss02'",
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.cursorWidth": 3,
  "terminal.integrated.cursorStyleInactive": "outline",

  "debug.console.fontFamily": "'JetBrainsMono Nerd Font', 'Cascadia Code NF', 'JetBrainsMono NF', 'JetBrains Mono Nerd Font', 'JetBrains Mono NF', 'MesloLGM Nerd Font Mono', 'MesloLGS Nerd Font Mono', 'JetBrains Mono', 'Liberation Mono', 'DejaVu Sans Mono', monospace",
  "debug.console.fontSize": 11,

  // Good alternatives:
  //    "terminal.integrated.fontFamily": "Iosevka Fixed",
  //    "terminal.integrated.fontFamily": "JetBrains Mono",
  //    "terminal.integrated.fontFamily": "Victor Mono",
  //    "terminal.integrated.fontFamily": "MesloLGS NF",
  //    "terminal.integrated.fontFamily": "RecMonoLinear Nerd Font",
  //    "terminal.integrated.fontFamily": "MesloLGS Nerd Font Mono",

  "terminal.integrated.tabs.enabled": true,
  "terminal.integrated.macOptionClickForcesSelection": true,
  "terminal.integrated.allowChords": false,
  "terminal.integrated.shellIntegration.enabled": true,
  "terminal.integrated.enableVisualBell": true,
  "terminal.integrated.bellDuration": 3000,
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.mouseWheelZoom": true,

  "terminal.integrated.enableFileLinks": "notRemote",
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.localEchoExcludePrograms": [
    "vim",
    "vi",
    "nano",
    "tmux",
    "nvim"
  ],
  "terminal.integrated.smoothScrolling": true,
  "terminal.integrated.stickyScroll.enabled": true,
  "terminal.integrated.suggest.enabled": true,
  "terminal.integrated.tabs.defaultColor": "terminal.ansiMagenta",

  "terminal.external.linuxExec": "kitty",
  "terminal.external.osxExec": "kitty.app",
  "terminal.external.windowsExec": "C:\\Windows\\System32\\kitty.exe",

  "terminal.integrated.enableMultiLinePasteWarning": "always",
  "terminal.integrated.minimumContrastRatio": 1,

  // #endregion terminal. }}}

  "window.titleBarStyle": "custom",
  "window.title": "[${rootNameShort}] [${activeRepositoryBranchName}] ${activeEditorMedium}",
  "window.newWindowDimensions": "inherit",
  "window.restoreWindows": "all",
  "window.newWindowProfile": "Default",
  "window.menuBarVisibility": "hidden",
  "window.customMenuBarAltFocus": false,
  "window.customTitleBarVisibility": "auto",

  "search.exclude": {
    "**/.archives": true,
    "**/.calva/": true,
    "**/.clj-kondo/": true,
    "**/.lsp/": true,
    "**/.vscode": true,
    "**/*.code-search": true,
    "**/bower_components": true,
    "**/dist/": true,
    "**/node_modules": true,
    "**/out/": true,
    "**/target/": true,
    "package-lock.json": true,
    "pnpm-lock.yaml": true
  },
  "search.defaultViewMode": "tree",
  "search.mode": "newEditor",
  "search.searchOnTypeDebouncePeriod": 500,
  "search.showLineNumbers": true,
  "search.smartCase": true,

  // Random one-off settings that doesn't make sense to put in a separate
  // category.

  "html.suggest.html5": false,
  "outline.collapseItems": "alwaysExpand",
  "problems.showCurrentInStatus": true,
  "scm.compactFolders": false,
  "scm.diffDecorationsGutterWidth": 5,
  "telemetry.telemetryLevel": "off",

  "[log][Log]": {
    "editor.fontSize": 11,
    "editor.fontWeight": "400",
    "editor.fontFamily": "Geist Mono"
    // "editor.fontFamily": "JetBrains Mono"
    // "editor.fontSize": 11,
    // "editor.fontWeight": "300"
    // "editor.fontLigatures": "'ss02', 'ss19', 'ss20', 'zero', 'cv03', 'cv04', 'cv16', 'cv19', 'cv20', 'cv99'"
  },
  "@azure.argTenant": "",
  "dev.containers.dockerPath": "podman",
  "geminicodeassist.enableTelemetry": false,
  "postman.settings.dotenv-detection-notification-visibility": false,

  "diffEditor.codeLens": true,
  "diffEditor.ignoreTrimWhitespace": true,
  "diffEditor.renderSideBySide": true,

  // Detect remapped keys better (e.g. caps lock -> ctrl).
  "keyboard.dispatch": "keyCode",

  //----------------------------------------------------------------------------
  // #region VSCodeNeovim. {{{
  //----------------------------------------------------------------------------

  "vscode-neovim.compositeTimeout": 100,
  "vscode-neovim.compositeKeys": {
    "jf": {
      // Easier way to leave insert mode.
      "command": "vscode-neovim.escape"
    },
    "fj": {
      // Easier way to leave insert mode.
      "command": "vscode-neovim.escape"
    },
    ",w": {
      // Easier way to leave insert mode and save the file.
      "command": "vscode-neovim.lua",
      "args": [
        "vim.api.nvim_input('<Esc>') require('vscode').action('workbench.action.files.save')"
      ]
    },
    ",s": {
      // Easier way to leave insert mode and save the file.
      "command": "vscode-neovim.lua",
      "args": [
        "vim.api.nvim_input('<Esc>') require('vscode').action('workbench.action.files.save')"
      ]
    }
    // ",s": {
    //   // Easier way to leave insert mode and save the file.
    //   // TODO: figure out why this is not working.
    //   "command": "vscode-neovim.lua",
    //   "args": [
    //     "local code = require('vscode')",
    //     "code.action('vscode-neovim.escape')",
    //     "code.action('workbench.action.files.save')"
    //   ]
    // }
  },
  "vscode-neovim.ctrlKeysForInsertMode": ["r", "u", "w"],
  "vscode-neovim.ctrlKeysForNormalMode": [
    "a",
    // "b", -- I prefer half page (ctrl+u/d).
    // "c",
    "d",
    "e",
    // "h",
    "i",
    "j",
    "k",
    "l",
    "n",
    "m",
    "o",
    "r",
    "t",
    "u",
    "v",
    "w",
    "x",
    "y",
    "z",
    // "/", -- open terminal in a new tab. I don't want this.
    "]",
    "right",
    "left",
    "up",
    "down",
    "backspace",
    "delete"
  ],

  // #endregion VSCodeNeovim. }}}
  //----------------------------------------------------------------------------

  //----------------------------------------------------------------------------
  // #region VSCodeVim. {{{
  //----------------------------------------------------------------------------

  "vim.leader": " ",

  "vim.easymotion": true,
  "vim.sneak": false,
  "vim.surround": true,

  "vim.incsearch": true,
  "vim.hlsearch": true,

  "vim.useSystemClipboard": true,
  "vim.camelCaseMotion.enable": true,

  // "vim.smartRelativeLine": true,
  // "vim.foldfix": true,

  // I mostly use automated formatters for my code, but I prefer comments.
  "vim.textwidth": 80,

  // This integration is not working for me and it seems like it is not being
  // maintained anymore: https://github.com/VSCodeVim/Vim/issues/1735
  "vim.enableNeovim": false,

  // // When using `useCtrlKeys = false`, this is my preferred configuration.
  // "vim.useCtrlKeys": false,
  // "vim.handleKeys": {
  //   "<C-[>": true,
  //   "<C-]>": true,
  //   "<C-d>": true,
  //   "<C-i>": true,
  //   "<C-o>": true,
  //   "<C-r>": true,
  //   "<C-u>": true,
  //   "<C-v>": true,
  //   "<C-w>": true
  // },

  // This is VERY, PAINFULLY, UNUSABLY slow in Ubuntu 20.04. It uses gdbus, as
  // shown in the following link. I also got the scripts (get-im and set-im)
  // from there:
  //
  //    https://github.com/daipeihust/im-select?tab=readme-ov-file#gdbus
  //
  // "vim.autoSwitchInputMethod.enable": true,
  // "vim.autoSwitchInputMethod.defaultIM": "1",
  // "vim.autoSwitchInputMethod.obtainIMCmd": "/home/marcelocra/bin/get-im",
  // "vim.autoSwitchInputMethod.switchIMCmd": "/home/marcelocra/bin/set-im {im}",

  "vim.insertModeKeyBindings": [
    {
      // Leave insert mode.
      "before": ["j", "f"],
      "after": ["<esc>"]
    },
    {
      // Leave insert mode.
      "before": ["f", "j"],
      "after": ["<esc>"]
    },
    {
      // Copy.
      "before": ["<C-c>"],
      "commands": ["editor.action.clipboardCopyAction"]
    },
    {
      // Paste.
      "before": ["<C-v>"],
      "commands": ["editor.action.clipboardPasteAction"]
    },
    {
      // Cut.
      "before": ["<C-x>"],
      "commands": ["editor.action.clipboardCutAction"]
    },
    {
      // Search (VSCode search).
      "before": ["<C-f>"],
      "commands": ["actions.find"]
    },
    {
      // Select all.
      "before": ["<C-a>"],
      "commands": ["editor.action.selectAll"]
    },
    {
      // Add next match to selection.
      "before": ["<C-d>"],
      "commands": ["editor.action.addSelectionToNextFindMatch"]
    },
    {
      // Save and go to normal mode.
      "before": [",", "w"],
      "commands": ["workbench.action.files.save"],
      "after": ["<Esc>"]
    },
    {
      // Save and go to normal mode.
      "before": [",", "s"],
      "commands": ["workbench.action.files.save"],
      "after": ["<Esc>"]
    },
    {
      // Save and quit.
      "before": [",", "x"],
      "commands": [
        "workbench.action.files.save",
        "workbench.action.closeActiveEditor"
      ]
    },
    {
      // Try to quit without saving.
      "before": [",", "q"],
      "commands": ["workbench.action.closeActiveEditor"]
    },
    {
      // Move using visual lines.
      "before": ["<Up>"],
      "commands": ["cursorUp"]
    },
    {
      // Move using visual lines.
      "before": ["<Down>"],
      "commands": ["cursorDown"]
    }

    // Next insert keybinding above.
  ],

  "vim.normalModeKeyBindings": [
    {
      // Use `s` to trigger Easymotion's full search.
      "before": ["s"],
      "after": ["<Leader>", "<Leader>", "s"]
    },
    {
      // Unimpaired: Insert a new line above the current line.
      "before": ["[", "<Space>"],
      "commands": ["editor.action.insertLineBefore", "cursorDown"]
    },
    {
      // Unimpaired: Insert a new line below the current line.
      "before": ["]", "<Space>"],
      "commands": ["editor.action.insertLineAfter", "cursorUp"]
    },
    {
      "before": ["<C-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["<C-l>"],
      "after": ["<C-w>", "l"]
    },
    {
      "before": ["<C-h>"],
      "after": ["<C-w>", "h"]
    },
    {
      "before": ["<C-j>"],
      "after": ["<C-w>", "j"]
    },
    {
      "before": ["<C-k>"],
      "after": ["<C-w>", "k"]
    },
    {
      "before": ["<Leader>", "<Leader>", "q"],
      "after": ["@", "q"]
    },
    {
      "before": ["u"],
      "commands": ["undo"]
    },
    {
      "before": ["<C-r>"],
      "commands": ["redo"]
    },

    // #region Move using visual lines. {{{
    {
      "before": ["j"],
      "commands": ["cursorDown"]
    },
    {
      "before": ["k"],
      "commands": ["cursorUp"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    {
      "before": ["<Up>"],
      "commands": ["cursorUp"]
    },
    {
      "before": ["<Down>"],
      "commands": ["cursorDown"]
    },
    // #endregion Move using visual lines. }}}

    {
      "before": ["<C-p>"],
      "commands": ["workbench.action.quickOpen"]
    },

    //
    // #region Conjure-like keybindings. {{{
    //
    // TODO: Move these to the keybindings file? I tried something similar with
    // Python there, use it as reference.
    //
    // #region Use Conjure-like keybindings for Calva/Clojure. {{{
    // {
    //   // evaluates current form
    //   // default: ctrl+enter
    //   "before": [" ", "e", "e"],
    //   "commands": ["calva.evaluateSelection"]
    // },
    // {
    //   // evaluates current top level form
    //   // default: alt+enter
    //   "before": [" ", "e", "r"],
    //   "commands": ["calva.evaluateCurrentTopLevelForm"]
    // },
    // {
    //   "before": [" ", "e", "c", "e"],
    //   "commands": ["calva.evaluateSelectionAsComment"]
    // },
    // {
    //   "before": [" ", "e", "c", "r"],
    //   "commands": ["calva.evaluateTopLevelFormAsComment"]
    // },
    // {
    //   "before": [" ", "e", "b"],
    //   "commands": ["calva.loadFile"]
    // },
    // {
    //   "before": ["<a-i>"],
    //   "commands": ["editor.action.showHover"]
    // },
    // {
    //   "before": ["K"],
    //   "commands": ["calva.printClojureDocsToOutputWindow"]
    // },
    // {
    //   "before": [" ", "d", "$"],
    //   "commands": ["paredit.killListForward"]
    // },
    // {
    //   "before": [" ", "d", "e"],
    //   "commands": ["paredit.killListForward"]
    // },
    // {
    //   "before": [" ", "d", "0"],
    //   "commands": ["paredit.killListBackward"]
    // },
    // {
    //   "before": [" ", "d", "b"],
    //   "commands": ["paredit.killListBackward"]
    // },
    // {
    //   "before": [" ", "s", "e"],
    //   "commands": ["paredit.spliceSexpKillForward"]
    // },
    // {
    //   "before": [" ", "s", "b"],
    //   "commands": ["paredit.spliceSexpKillBackward"]
    // }
    //
    // #endregion Making Calva keybindings more like Conjure ones. }}}

    // #region Use Conjure-like keybindings for FSharp. {{{
    //
    // {
    //   "before": [" ", "e", "e"],
    //   "commands": ["fsi.SendLine", "extension.vim_up"]
    // },
    // {
    //   "before": [" ", "e", "r"],
    //   "commands": ["fsi.SendSelection"],
    //   "after": ["v", "i", "p"]
    // },
    // {
    //   "before": [" ", "e", "w"],
    //   "commands": ["fsi.SendSelection", "extension.vim_escape"],
    //   "after": ["v", "i", "w"]
    // },
    // {
    //   "before": [" ", "e", "f"],
    //   "commands": ["fsi.SendFile"]
    // },
    // {
    //   "before": [" ", "e", "b"],
    //   "commands": ["fsi.SendFile"]
    // },
    //
    // #endregion Use Conjure-like keybindings for FSharp. }}}

    // #endregion Conjure-like keybindings. }}}
    //

    {
      "before": ["|"],
      "commands": ["workbench.action.splitEditor"]
    },
    {
      "before": ["-"],
      "commands": ["workbench.action.splitEditorDown"]
    },
    {
      "before": ["g", "e"],
      "commands": ["editor.action.marker.nextInFiles"]
    },
    {
      "before": ["g", "E"],
      "commands": ["editor.action.marker.prevInFiles"]
    },
    {
      "before": ["Y"],
      "after": ["y", "$"]
    },
    {
      "before": [" ", "w", "s"],
      "commands": ["workbench.action.quickTextSearch"]
    },
    {
      "before": ["g", "w"],
      "after": ["g", "q"]
    },
    {
      "before": ["g", "w", "w"],
      "after": ["g", "q", "q"]
    },

    {
      // Copy.
      "before": ["<C-c>"],
      "commands": ["editor.action.clipboardCopyAction"]
    },
    {
      // Search (VSCode search).
      "before": ["<C-f>"],
      "commands": ["actions.find"]
    },

    {
      // Go back.
      "before": ["<C-o>"],
      "commands": ["workbench.action.navigateBack"]
    },
    {
      // Go forward.
      "before": ["<C-i>"],
      "commands": ["workbench.action.navigateForward"]
    }

    // Next normal keybinding above.
  ],

  "vim.visualModeKeyBindings": [
    {
      // Add next match to selection.
      "before": ["<C-d>"],
      "commands": ["editor.action.addSelectionToNextFindMatch"]
    },
    {
      // Move selection to next match.
      "before": ["<C-n>"],
      "commands": ["editor.action.moveSelectionToNextFindMatch"]
    },
    {
      // Move selection to previous match.
      "before": ["<C-p>"],
      "commands": ["editor.action.moveSelectionToPreviousFindMatch"]
    },

    // #region Move using visual lines. {{{
    {
      "before": ["j"],
      "after": ["g", "j"]
    },
    {
      "before": ["k"],
      "after": ["g", "k"]
    },
    {
      "before": ["0"],
      "after": ["g", "0"]
    },
    {
      "before": ["$"],
      "after": ["g", "$"]
    },
    {
      "before": ["<Up>"],
      "after": ["g", "<Up>"]
    },
    {
      "before": ["<Down>"],
      "after": ["g", "<Down>"]
    },
    // #endregion Move using visual lines. }}}

    {
      // Save and exit normal mode.
      "before": [",", "w"],
      "commands": ["workbench.action.files.save"],
      "after": ["<Esc>"]
    },
    {
      // Save and exit normal mode.
      "before": [",", "s"],
      "commands": ["workbench.action.files.save"],
      "after": ["<Esc>"]
    },
    // {
    //   // Paste without replacing clipboard. Better than the one below? This
    //   // one replaces the clipboard content twice, so when using a clipboard
    //   // manager it can be useful.
    //   "before": ["p"],
    //   "after": ["p", "g", "v", "y"]
    // }
    {
      // Paste without replacing clipboard content.
      "before": ["p"],
      "after": ["\"", "_", "d", "P"]
    },
    {
      // Search for all occurences of the selected text.
      // TODO: Figure out how to escape '/' here. Doesn't work if there's any.
      "before": ["/", "/"],
      "after": ["y", "/", "<C-r>", "*", "<CR>"]
    },
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    },

    // {
    //   // Use Conjure-like keybindings for Calva/Clojure.
    //   "before": [" ", "E"],
    //   "commands": ["calva.evaluateSelectionToSelectionEnd"]
    // },
    //   {
    //     // Use Conjure-like keybindings for FSharp.
    //     "before": [" ", "E"],
    //     "commands": ["fsi.SendSelection"]
    //   },

    {
      "before": ["<C-a>"],
      "commands": ["editor.action.selectAll"]
    },
    {
      // Use `s` to trigger easymotion full search.
      "before": ["s"],
      "after": ["<Leader>", "<Leader>", "s"]
    }
  ],

  "vim.visualModeKeyBindingsNonRecursive": [
    {
      // I have a keybinding that makes 'p' paste over a selection without
      // loosing clipboard content. If the selection content is desirable, this
      // keybinding can be used instead, and it will copy the selection over the
      // clipboard. to avoid loosing clipboard content.
      "before": ["g", "p"],
      "after": ["p"]
    }
  ],

  "vim.operatorPendingModeKeyBindings": [
    {
      "before": ["L"],
      "after": ["$"]
    },
    {
      "before": ["H"],
      "after": ["^"]
    }
  ],

  "vim.operatorPendingModeKeyBindingsNonRecursive": [
    {
      "before": ["("],
      "after": ["a", "("]
    },
    {
      "before": ["["],
      "after": ["a", "["]
    },
    {
      "before": ["{"],
      "after": ["a", "{"]
    }
  ],

  // #endregion VSCodeVim. }}}
  //----------------------------------------------------------------------------

  // #region workbench {{{

  "workbench.colorCustomizations": {
    // "editorCursor.foreground": "#00ffff", // cyan
    "editorCursor.foreground": "#cc00ff", // orange red
    // "editorCursor.foreground": "#00ffc8", // blue-green
    "editorCursor.background": "#000",

    "terminalCursor.foreground": "#cc00ff", // orange red
    "terminalCursor.background": "#000",

    // Testing some colors. Not great.
    // "minimap.background": "#00000055",
    // "minimapSlider.activeBackground": "#5533ff44",
    // "minimapSlider.hoverBackground": "#ff450044",
    // "minimapSlider.background": "#ff450022",

    // My colors:
    // - most backgrounds: #33475C
    // - focus and active tab borders: #A699FF
    // - most other borders: #4b6786
    // - active tab and sticky section backgrounds: #332c5f
    // - most errors: #ff4500
    // - most warnings: #ffa70f
    //
    // Other interesting ones (from v0.dev):
    // --geist-cyan-lighter: #aaffec;
    // --geist-cyan-light: #79ffe1;
    // --geist-cyan: #50e3c2;
    // --geist-cyan-dark: #29bc9b;

    "[Tokyo Night][Tokyo Night Storm]": {
      "menu.border": "#5588ff55",
      "focusBorder": "#5588ff55",
      "editorWidget.border": "#5588ff55",

      // "tab.border": "#5588ff55",
      "tab.activeBorder": "default",
      "tab.activeBorderTop": "default",
      "tab.activeBackground": "#332c5f",
      "tab.lastPinnedBorder": "#5588ff55",

      "titleBar.border": "#5588ff55",
      // Like terminal.
      "panel.border": "#5588ff55",
      "sideBar.border": "#5588ff55",
      "editorGroup.border": "#5588ff55",

      // File picker (ctrl+p) focused element background.
      "quickInputList.focusBackground": "#5533ffaa",
      "quickInputList.focusForeground": "#fff",
      "quickInputList.focusIconForeground": "#fff",
      // Works for quickInputList too.
      "widget.border": "#5588ff55",

      // Code actions (ctrl+.) focused element background.
      "editorActionList.focusBackground": "#5533ff",

      // Border of the complete widget.
      "editorSuggestWidget.border": "#5588ff55",
      // "editorSuggestWidget.selectedForeground": "#000",
      // // Background of the complete widget.
      // "editorSuggestWidget.background": "#e6e7ed",
      // Background of the focused item.
      "editorSuggestWidget.selectedBackground": "#5588ff55",
      "editorSuggestWidget.selectedForeground": "#fff",
      "editorSuggestWidget.highlightForeground": "#00ffffdd",
      "editorSuggestWidget.focusHighlightForeground": "#00ffffdd",
      // // Text color.
      "editorSuggestWidget.foreground": "#fff",

      // // Element that is focused in the explorer.
      // "list.focusBackground": "#5588ff",
      // "list.focusForeground": "#000",

      // // Element that was focused in the explorer.
      // "list.inactiveFocusBackground": "#5588ff33",

      // // Not sure what this is.
      // "list.deemphasizedForeground": "#ff450055",

      "editor.inactiveSelectionBackground": "#5533ff22",
      // "editor.selectionHighlightBorder": "#008800",
      // "editor.selectionHighlightBackground": "#ff008833",
      "editor.lineHighlightBorder": "#5533ff33",
      // "editor.wordHighlightBorder": "#171f2c",
      "editor.rangeHighlightBackground": "#5533ff55",
      "editor.selectionBackground": "#5533ff55"
    },

    "[Tokyo Night Light]": {
      "tab.activeBackground": "#00ffff55"
    },

    "[Tokyo Night Light][Spiral Tattoo Ink Dark Dim][Night Owl Light]": {
      // File picker (ctrl+p) focused element background.
      "quickInputList.focusBackground": "#00ffff55",

      // Code actions (ctrl+.) focused element background.
      "editorActionList.focusBackground": "#00ffff55",

      // Border of the complete widget.
      "editorSuggestWidget.border": "#4b6786",

      // "editorSuggestWidget.selectedForeground": "#000",

      // // Background of the complete widget.
      // "editorSuggestWidget.background": "#e6e7ed",

      // Background of the focused item.
      "editorSuggestWidget.selectedBackground": "#00ffff55",

      // // Text color.
      // "editorSuggestWidget.foreground": "#000",

      // // Element that is focused in the explorer.
      // "list.focusBackground": "#ff450055",
      // // Element that was focused in the explorer.
      // "list.inactiveFocusBackground": "#00000011",

      // // Not sure what this is.
      // "list.deemphasizedForeground": "#ff450055",

      "editor.inactiveSelectionBackground": "#00ffff22",
      // "editor.selectionHighlightBorder": "#008800",
      // "editor.selectionHighlightBackground": "#ff008833",
      "editor.lineHighlightBorder": "#00ffff33",
      // "editor.wordHighlightBorder": "#171f2c",
      "editor.rangeHighlightBackground": "#00ffff55",
      "editor.selectionBackground": "#00ffff55"
    },

    "[Spiral Tattoo Ink Dark Dim]": {
      // Test custom colors here, before moving to the theme. Example above (but in here they will only apply to this
      // theme).
      "textPreformat.foreground": "#fff",
      "textPreformat.background": "#332c5f",

      "editorStickyScroll.background": "#1b2733",
      "editorStickyScroll.border": "#4b6786",
      "editorStickyScroll.shadow": "#222",

      "symbolIcon.packageForeground": "#ffff00",

      "symbolIcon.constructorForeground": "#00ffff",
      "symbolIcon.functionForeground": "#00ffff",

      "symbolIcon.fieldForeground": "#ff00f7",
      "symbolIcon.variableForeground": "#ff00f7",

      "symbolIcon.booleanForeground": "#ff00aa",
      "symbolIcon.nullForeground": "#ff00aa",
      "symbolIcon.operatorForeground": "#ff00aa",
      "symbolIcon.numberForeground": "#ff00aa",
      "symbolIcon.referenceForeground": "#ff00aa"
    },

    "[Andromeda][Andromeda Bordered][Andromeda Colorizer][Andromeda Italic Bordered][Andromeda Italic]": {
      // "editorCursor.background": "#f00",
      // "selection.background": "#f00",
      "editor.selectionBackground": "#ff00ff55",
      // "editor.selectionForeground": "#000",
      "editor.wordHighlightBackground": "#ff00ff17"
    },

    "[Solarized Light]": {
      "editor.selectionBackground": "#00ffff55",
      "editor.wordHighlightBackground": "#00ffff22"
    }

    // Next theme colorscheme customization.
  },
  "workbench.startupEditor": "newUntitledFile",
  "workbench.tree.indent": 20,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.list.horizontalScrolling": true,
  "workbench.sideBar.location": "left",
  "workbench.panel.defaultLocation": "bottom",
  "workbench.editor.pinnedTabsOnSeparateRow": false,
  "workbench.activityBar.location": "top",
  "workbench.preferredDarkColorTheme": "Monokai",
  "workbench.preferredLightColorTheme": "Night Owl Light",

  // Keep the color theme last, as I'm always changing it and this way we won't
  // have a problem with the comma.

  "workbench.colorTheme": "Monokai"

  // #endregion workbench. }}}
}
