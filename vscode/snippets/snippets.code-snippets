// Place your global snippets here. Each snippet is defined under a snippet name
// and has a scope, prefix, body and description. Add comma separated ids of the
// languages where the snippet is applicable in the scope field. If scope is
// left empty or omitted, the snippet gets applied to all languages. The prefix
// is what is used to trigger the snippet and the body will be expanded and
// inserted. Possible variables are: $1, $2 for tab stops, $0 for the final
// cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders
// with the same ids are connected.
//
// Example:
//  "Print to console": {
// 	  "scope": "javascript,typescript",
// 	  "prefix": "log",
//  	"body": [
//  		"console.log('$1');",
// 	  	"$2"
// 	  ],
// 	  "description": "Log output to console"
//  }
{
  // -- ESLINT -----
  "eslint disable next line without reason": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ednl",
    "body": [
      "// eslint-disable-next-line"
    ]
  },
  "eslint disable next line with reason": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "ednlr",
    "body": [
      "// eslint-disable-next-line ${1:@typescript-eslint/no-explicit-any}$0"
    ]
  },
  "eslint disable next line useEffect exhaustive deps": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ednlex",
    "body": [
      "// eslint-disable-next-line react-hooks/exhaustive-deps"
    ]
  },
  // -- REACT -----
  "react useState hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "us",
    "body": [
      "const [$1, set${1/(.*)/${1:/capitalize}/}] = useState($2)"
    ]
  },
  "react useEffect hook": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ue",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, [$2])"
    ]
  },
  "react const with function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "const",
    "body": [
      "const $2 = $1()"
    ]
  },
  "delay promise": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "delay",
    "body": [
      "await new Promise((resolve) => setTimeout(resolve, $1))"
    ]
  },
  "javascript type": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "type",
    "body": [
      "/** @type {$1} */ $2"
    ]
  },
  "tsignore": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tsi",
    "body": [
      "// @ts-ignore"
    ]
  },
  "ts expect error": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tse",
    "body": [
      "// @ts-expect-error - ${1:expected error}${0: - reason}"
    ]
  },
  "ts nocheck - ignore current file (should be in the first line)": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tsno",
    "body": [
      "// @ts-nocheck",
    ]
  },
  "ts check - check this file (should be in the first line)": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "tscheck",
      "check",
      "tsch",
      "ch"
    ],
    "body": [
      "// @ts-check",
    ]
  },
  "shebang": {
    "prefix": [
      "sb",
      "shebang"
    ],
    "body": [
      "#!/usr/bin/env $1"
    ]
  },
  "config comment block": {
    "scope": "json,jsonc",
    "description": "Create simple comment to make parts of a config easier to find. The parenthesis also simplify jumping between start and finish of the block.",
    "prefix": "-",
    "body": [
      "// -$1(",
      "$0",
      "// )$1-"
    ]
  },
  "simplify commenting forms in clojure": {
    "scope": "clojure,clojurescript,cljs,clj",
    "prefix": "c",
    "body": [
      "#_"
    ]
  },
  "rich comment": {
    "scope": "clojure,clojurescript",
    "prefix": "rich",
    "body": [
      ";; playground!",
      "(comment",
      "",
      "  $0",
      "",
      "  #_(\"do not wrap me!\"))",
    ]
  },
  "add tailwindcss play cdn conditionally to re-frame app": {
    "scope": "clojure,clojurescript",
    "prefix": "re-tw",
    "body": [
      ";; Lets use TailwindCSS CDN during development, for simplicity.",
      "(when config/debug?",
      "  (let [body (.-body js/document)",
      "        script (.createElement js/document \"script\")]",
      "    (.setAttribute script \"src\" \"https://cdn.tailwindcss.com\")",
      "    (.setAttribute body \"class\" \"container min-w-[700] min-h-screen mx-auto\")",
      "    (.appendChild body script)))",
    ]
  },
  "shadow watch with cider": {
    "scope": "clojure,clojurescript,clj,cljs,json,jsonc",
    "prefix": "shadow+cider",
    "body": [
      "shadow-cljs -d cider/cider-nrepl:0.28.5 watch"
    ]
  },
  "add keybinding for a particular vim mode": {
    "scope": "json,jsonc",
    "prefix": "vimmode",
    "body": [
      "vim.active && vim.mode == '$1'${2: && }$0"
    ]
  },
  "simplify adding a new keybinding": {
    "scope": "json,jsonc",
    "prefix": "key",
    "body": [
      "{",
      "  \"key\": \"$1\",",
      "  \"command\": \"$2\",",
      "  \"when\": \"$3\"",
      "},$0",
    ]
  },
  "classname for jsx and tsx": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "c",
    "body": [
      "className=\"$1\"${0: }"
    ]
  },
  "tailwind center stuff on page": {
    "scope": "html,javascriptreact,typescriptreact",
    "prefix": "center",
    "body": [
      "min-h-screen mx-auto flex justify-center items-center"
    ]
  },
  "eslint allow no explicit any": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "eslint-nea",
    "body": [
      "// eslint-disable-next-line @typescript-eslint/no-explicit-any"
    ]
  },
  "search comments that also fold in vim": {
    "prefix": "co",
    "body": [
      "${1:#} $2(((",
      "$0",
      "${1:#} )))$2"
    ]
  },
  "json with comments - linguist": {
    "scope": "json,jsonc",
    "prefix": "linguistjson",
    "body": [
      "linguist-language=JSON-with-Comments"
    ]
  },
  "typescript name": {
    "prefix": "ts",
    "body": [
      "TypeScript"
    ]
  },
  "javascript name": {
    "prefix": "js",
    "body": [
      "JavaScript"
    ]
  },
  "node test imports": {
    "scope": "typescript,javascript",
    "prefix": "node-test",
    "body": [
      "import { strict as assert } from \"node:assert\";",
      "import { test } from \"node:test\";",
    ]
  },
  //
  // Elm spacing settings are very aesthetic and visually pleasing, combining
  // 3 and 2 spaces before and after some elements or comments. Example below:
  //
  // ```elm
  //
  //   main =
  //      Browser.sandbox { init = init, update = update, view = view }
  //
  //
  //
  //   -- MODEL
  //
  //
  //   type alias Model = Int
  //
  // ```
  //
  // Here we use comments for this, so that we can still use Prettier for
  // automatic formatting but still get some of the visual benefits.
  //
  "elm-like spacing (using comments) for json(c)": {
    "scope": "json,jsonc,snippets,javascript,typescript",
    "prefix": "c",
    "body": [
      "",
      "//",
      "//",
      "// $1",
      "//",
      "$0",
      "",
    ]
  },
  //
  //
  // Try to use the same node and npm versions throughout my projects.
  //
  "package.json node and npm configuration": {
    "scope": "json,jsonc",
    "prefix": "node",
    "body": [
      "\"engines\": {",
      "  \"node\": \">=20\"",
      "},",
      "\"engineStrict\": true,",
      "\"packageManager\": \"npm@10.5.0\",",
      "\"author\": {",
      "  \"name\": \"Marcelo Almeida\",",
      "  \"email\": \"${1:2532492+marcelocra@users.noreply.github.com}\",",
      "},",
      "\"repository\": {",
      "  \"type\": \"git\",",
      "  \"url\": \"https://github.com/marcelocra${2:/site}\"",
      "}"
    ]
  },
  "yaml json schema link": {
    "scope": "yaml,yml",
    "prefix": "schema",
    "body": [
      "# yaml-language-server: \\$schema=https://json.schemastore.org/package.json"
    ]
  },
  "deno shebang": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": "deno",
    "body": [
      "#!/usr/bin/env -S deno run ${0:--allow-read --allow-write --allow-run --allow-env --env}",
      "// The example above includes common permissions for a Node-like run.",
      "//",
      "// Use the docs below to write fine-grained permissions. For most of",
      "// them you can provide a CSV list detailing exactly which resources to",
      "// make available. For example, --allow-read='/some/path/here' will",
      "only allow the program to read from that particular path. Without the",
      "// '=csv,list,here', the permission applies to all resources of that",
      "// type: --allow-read allows the program to read all files it wants to.",
      "// Be careful when using them.",
      "//",
      "// Some commonly used permissions (see docs for all):",
      "//   --allow-read[=csv-list]",
      "//   --allow-write[=csv-list]",
      "//   --allow-sys[=csv-list]",
      "//   --allow-net[=csv-list]",
      "//   --allow-env[=csv-list]",
      "//   --allow-run[=csv-list]",
      "//   --env: read from .env",
    ]
  },
  "localhost address ipv4": {
    "prefix": "localhost",
    "body": [
      "127.0.0.1"
    ]
  },
  "add 'unlicensed' lincense and copyright notice text": {
    "prefix": [
      "unlicensed",
      "no-permission",
      "no-license"
    ],
    "body": [
      "// https://choosealicense.com/no-permission/",
      "",
      "Â© 2024 Marcelo Almeida (https://marcelocra.dev). All rights reserved.",
      "",
      "This software and associated documentation files (the \"Software\") are the exclusive property of Marcelo Almeida (https://marcelocra.dev). Unauthorized copying, modification, distribution, or any other form of use of the Software, in whole or in part, is strictly prohibited without the prior written consent of Marcelo Almeida (https://marcelocra.dev).",
      "",
      "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES, OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF, OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
      "",
    ]
  },
  "add unlicensed copyright notice to a file": {
    "prefix": [
      "cr-unl",
      "copy-unl",
      "copyright-unl"
    ],
    "body": [
      "Â© 2024 Marcelo Almeida (https://marcelocra.dev). All rights reserved.",
    ]
  },
  "add copyright notice to a file": {
    "prefix": [
      "cr",
      "copy",
      "copyright"
    ],
    "body": [
      "Copyright (C) 2024 Marcelo Almeida (https://marcelocra.dev)",
    ]
  },
  "package.json scripts entry": {
    "scope": "json,jsonc,snippets",
    "prefix": [
      "script",
      "s"
    ],
    "body": [
      "\"$1\"${2:: \"$3\"},$0"
    ]
  },
  "deno ignore file": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": [
      "denoif",
    ],
    "body": [
      "// deno-lint-ignore-file ${1:prefer-const}$0"
    ]
  },
  "deno ignore next line": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": [
      "denoi",
    ],
    "body": [
      "// deno-lint-ignore ${1:prefer-const}$0"
    ]
  },
  "create an immidiately invoked function expression": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": [
      "iife",
      "i"
    ],
    "body": [
      "(${1:async} ($2) => {$0})($2)"
    ]
  },
}