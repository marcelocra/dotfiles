{
  // Place your snippets for shellscript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "improve how bash scripts deal with errors by adding these to the top of the file": {
    "prefix": "set",
    "body": [
      "${2:# -e: exit on error}",
      "${4:# -u: exit on undefined variable}",
      "${6:# -x: print commands before execution}",
      "${8:# -o pipefail: exits on command pipe failures}",
      "set -${1:e}${3:u}${5:x}${7:o pipefail}$0"
    ]
  },
  "posix shell shebang": {
    "prefix": "posix",
    "body": [
      "#!/usr/bin/env sh",
      "",
      "$0"
    ]
  },
  "start a new shell file": {
    "prefix": "posix-init",
    "body": [
      "#!/usr/bin/env sh",
      "",
      "# Exits on error, and undefined variable.",
      "set -eu",
      "",
      "# Helpers.",
      "",
      "error() {",
      "  local sep=\"$(printf \"%.0s-\" $(seq 1 80))\"",
      "",
      "  echo \"\\${sep}\"",
      "  echo \"Error:\" >&2",
      "  echo \"Error: \\$1\" >&2",
      "  echo \"Error:\" >&2",
      "  echo \"\\${sep}\"",
      "}",
      "",
      "usage() {",
      "",
      "  echo -n 'Usage: <script name> [options] [arguments]",
      "",
      "options:",
      "- ",
      "",
      "arguments:",
      "- ",
      "'",
      "}",
      "",
      "main() {",
      "  local args=\"$@\"",
      "  ",
      "  $0",
      "  ",
      "  if [ $# -eq 0 ]; then",
      "    usage",
      "    error 'No arguments provided.'",
      "    return 1",
      "  fi",
      "}",
      "",
      "main \"$@\"",
      "",
      "# Exits successfully if the script gets here.",
      "return 0"
    ]
  },
  "create basic script structure": {
    "prefix": [
      "old-init"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "#",
      "# ${1:TODO: Add a description of the script}",
      "",
      "",
      "",
      "# DEFINITIONS",
      "",
      "",
      "helpers() {",
      "    # Change this to false when you're done debugging.",
      "    is_debug() { true; }",
      "    now() { echo -n \"[$(date '+%Y-%m-%d %H:%M:%S')] \"; }",
      "}",
      "",
      "",
      "setupAndValidation() {",
      "    $2",
      "}",
      "",
      "",
      "main() {",
      "    $3",
      "}",
      "",
      "",
      "",
      "# SCRIPT",
      "",
      "",
      "helpers",
      "setupAndValidation",
      "main \"$@\"",
      "",
    ]
  },
  "create an inotifywait watcher": {
    "prefix": [
      "watch"
    ],
    "body": [
      "files_to_watch() {",
      "    find ${1:.src} -regextype egrep -regex '${2:.*\\.(js|css|html)$}'",
      "}",
      "",
      "process_file() {",
      "    local file=\"\\$1\"",
      "    ",
      "    echo '!!!'",
      "    echo -n '!!! '",
      "    echo -n \"File changed: '\\$file'\"",
      "    echo '!!!'",
      "    ",
      "    ${3:echo 'Do something with the \\$file here.'} \\",
      "        && echo 'Success!' \\",
      "        || echo 'Failed :('",
      "}",
      "",
      "inotifywait -m -e close_write $(files_to_watch) | \\",
      "    while read -r file _evt; do",
      "        process_file \"\\$file\"",
      "    done",
    ],
  },
  "`find` using an `egrep` regex": {
    "prefix": [
      "find"
    ],
    "body": [
      "find ${1:.} -regextype egrep -regex '${2:.*\\.(js|css|html)$}'$0",
    ]
  },
  "template for a robust script per chatgpt 4o": {
    "prefix": [
      "base",
      "script",
      "shell"
    ],
    "body": [
      "#!/usr/bin/env bash",
      "#",
      "# ${1:TODO: Add a description of the script}",
      "",
      "set -euo pipefail",
      "",
      "# Show commands if in debug mode.",
      "[[ \"${DEBUG:-}\" == \"true\" ]] && set -x",
      "",
      "# Trap signals",
      "trap \"echo 'Ctrl+C pressed! Script interrupted.'; exit 1\" SIGINT SIGTERM",
      "",
      "# Logging",
      "now() { echo -n \"[$(date '+%Y-%m-%d %H:%M:%S')] \"; }",
      "log() { echo \"$(now)[INFO]$*\"; }",
      "error() { echo \"$(now)[ERROR] $*\" >&2; }",
      "",
      "# Main logic",
      "main() {",
      "  log \"Starting script...\"",
      "  # TODO: Your script logic here.",
      "}",
      "",
      "# Execute main",
      "main \"$@\"",
    ]
  },
  "start of shell scripts that uses the `essentials` lib": {
    "prefix": [
      "init"
    ],
    "body": [
      "################## MUST BE THE FIRST THING AFTER THE SHEBANG ##################",
      "essentials_script_path=${HOME}/lib/essentials.sh",
      "[[ -f $essentials_script_path ]] || {",
      "    echo \"ERROR: File not found: $essentials_script_path\"",
      "    exit 1",
      "}",
      "source $essentials_script_path",
      "essentials_setup $0",
      "################## MUST BE THE FIRST THING AFTER THE SHEBANG ##################",
    ]
  },
}