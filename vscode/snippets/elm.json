{
  // Place your snippets for elm here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "creates a port that sends json to JavaScript": {
    "prefix": [
      "port"
    ],
    "body": [
      "-- TODO: Add `port` to the beginning of the file: `port module Main exposing`.",
      "-- TODO: Install `elm/json` package: `elm install elm/json`.",
      "-- TODO: Remove these TODOs.",
      "",
      "",
      "type alias CommandToSendJs =",
      "    { command : String",
      "    , args : List String",
      "    }",
      "",
      "",
      "encodeCommandToSendJs : CommandToSendJs -> E.Value",
      "encodeCommandToSendJs toSend =",
      "    E.object",
      "        [ ( \"command\", E.string toSend.command )",
      "        , ( \"args\", E.list E.string toSend.args )",
      "        ]",
      "",
      "",
      "{-| Sends JSON messages to JavaScript.",
      "-}",
      "port sendJsonMessage : E.Value -> Cmd msg",
      "",
      "",
      "{-| Receives string messages from JavaScript.",
      "-}",
      "port messageReceiver : (String -> msg) -> Sub msg",
    ]
  },
  "documentation comment": {
    "prefix": [
      "doc",
      "comment"
    ],
    "body": [
      "{-| $1",
      "-}",
    ]
  },
  "create a command that waits before triggering a new update": {
    "prefix": [
      "wait"
    ],
    "body": [
      "Process.sleep 3000",
      "  |> Task.perform (\\_ -> HideError)"
    ]
  },
  "Browser.application template": {
    "prefix": [
      "app",
      "spa"
    ],
    "body": [
      "module Main exposing (main)",
      "",
      "import Browser",
      "import Browser.Navigation as Nav",
      "import Html exposing (..)",
      "import Html.Attributes exposing (..)",
      "import Url",
      "",
      "",
      "",
      "-- MAIN",
      "",
      "",
      "main : Program () Model Msg",
      "main =",
      "  Browser.application",
      "    { init = init",
      "    , view = view",
      "    , update = update",
      "    , subscriptions = subscriptions",
      "    , onUrlChange = UrlChanged",
      "    , onUrlRequest = LinkClicked",
      "    }",
      "",
      "",
      "",
      "-- MODEL",
      "",
      "",
      "type alias Model =",
      "  { key : Nav.Key",
      "  , url : Url.Url",
      "  }",
      "",
      "",
      "init : () -> Url.Url -> Nav.Key -> ( Model, Cmd Msg )",
      "init flags url key =",
      "( Model key url, Cmd.none )",
      "",
      "",
      "",
      "-- UPDATE",
      "",
      "",
      "type Msg",
      "  = LinkClicked Browser.UrlRequest",
      "  | UrlChanged Url.Url",
      "",
      "",
      "update : Msg -> Model -> ( Model, Cmd Msg )",
      "update msg model =",
      "  case msg of",
      "    LinkClicked urlRequest ->",
      "      case urlRequest of",
      "        Browser.Internal url ->",
      "          ( model, Nav.pushUrl model.key (Url.toString url) )",
      "",
      "        Browser.External href ->",
      "          ( model, Nav.load href )",
      "",
      "    UrlChanged url ->",
      "      ( { model | url = url }",
      "      , Cmd.none",
      "      )",
      "",
      "",
      "",
      "-- SUBSCRIPTIONS",
      "",
      "",
      "subscriptions : Model -> Sub Msg",
      "subscriptions _ =",
      "  Sub.none",
      "",
      "",
      "",
      "-- VIEW",
      "",
      "",
      "view : Model -> Browser.Document Msg",
      "view model =",
      "  { title = \"URL Interceptor\"",
      "  , body =",
      "      [ text \"The current URL is: \"",
      "      , b [] [ text (Url.toString model.url) ]",
      "      , ul []",
      "          [ viewLink \"/home\"",
      "          , viewLink \"/profile\"",
      "          , viewLink \"/reviews/the-century-of-the-self\"",
      "          , viewLink \"/reviews/public-opinion\"",
      "          , viewLink \"/reviews/shah-of-shahs\"",
      "          ]",
      "      ]",
      "  }",
      "",
      "",
      "viewLink : String -> Html msg",
      "viewLink path =",
      "  li [] [ a [ href path ] [ text path ] ]",
    ]
  },
  "Browser.element template": {
    "prefix": [
      "page",
      "element",
      "el"
    ],
    "body": [
      "module Main exposing (..)",
      "",
      "import Browser",
      "import Html exposing (Html, text)",
      "",
      "",
      "",
      "-- MAIN",
      "",
      "",
      "main : Program () Model Msg",
      "main =",
      "    Browser.element",
      "        { init = init",
      "        , view = view",
      "        , update = update",
      "        , subscriptions = subscriptions",
      "        }",
      "",
      "",
      "",
      "-- MODEL",
      "",
      "",
      "type alias Model =",
      "    { message : String }",
      "",
      "",
      "init : () -> ( Model, Cmd Msg )",
      "init _ =",
      "    ( { message = \"Hello, Elm!\" }",
      "    , Cmd.none",
      "    )",
      "",
      "",
      "",
      "-- UPDATE",
      "",
      "",
      "type Msg",
      "    = NoOp",
      "",
      "",
      "update : Msg -> Model -> ( Model, Cmd Msg )",
      "update _ model =",
      "    ( model, Cmd.none )",
      "",
      "",
      "",
      "-- VIEW",
      "",
      "",
      "view : Model -> Html Msg",
      "view model =",
      "    text model.message",
      "",
      "",
      "",
      "-- SUBSCRIPTIONS",
      "",
      "",
      "subscriptions : Model -> Sub Msg",
      "subscriptions _ =",
      "    Sub.none",
      "",
    ]
  },
}