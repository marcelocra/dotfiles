# Load defaults and overrides (see includes at the end).

# ------------------------------------------------------------------------------
# Main config.
# ------------------------------------------------------------------------------
[core]
    # Always use lf (\n) to avoid issues with Windows CRLF (\r\n).
    autocrlf = false
    eol = lf
    pager = less -F -X
    # Use better compression for repositories
    precomposeUnicode = true
    # Speed up operations on large repositories
    preloadindex = true
    # Use multiple threads when available
    fscache = true

[user]
    name = Marcelo Almeida
    email = 2532492+marcelocra@users.noreply.github.com

[init]
    defaultBranch = main

[push]
    autoSetupRemote = true
    # Push current branch to upstream branch of same name
    default = simple
    # Automatically follow tags when pushing
    followTags = true

[pull]
    rebase = false

[fetch]
    # Automatically prune deleted remote branches
    prune = true
    # Fetch all tags
    tags = true

[rebase]
    # Show conflict resolutions
    autoStash = true
    autoSquash = true

[merge]
    # Show common ancestor in merge conflicts
    conflictStyle = diff3
    # Use better merge algorithm
    algorithm = patience

[diff]
    # Better whitespace handling
    algorithm = patience
    compactionHeuristic = true
    colorMoved = default
    # Show renames
    renames = copies

[status]
    # Show untracked files
    showUntrackedFiles = all
    # Show submodule status
    submoduleSummary = true

[color]
    ui = true

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

# Modern Git features
[rerere]
    enabled = true

[help]
    autoCorrect = 1

[transfer]
    # Use protocol v2 for better performance
    protocol = 2

# ------------------------------------------------------------------------------
# Aliases.
# ------------------------------------------------------------------------------
[alias]
    # Diff stuff.
    dw = diff --word-diff --color-words
    dwm = diff --word-diff --color-words master
    d = dw HEAD
    ds = diff --stat  # Summary of current diff.

    dk = difftool --no-symlinks --dir-diff

    # Other stuff.
    b = branch
    co = checkout
    l = lol
    s = status
    st = status
    ps = push --set-upstream
    pso = push --set-upstream origin
    rom = rebase origin/master

    # The 'f' in the beginning stands for 'full'. So 'fd' -> 'full diff',
    # piping it through less (with colors!).
    fd = ! git diff --color=always | less -R
    fl = ! git log --color=always | less -R

    # One line colored log with date, committer and other info.
    lol = log --abbrev-commit --decorate --date=relative --format=format:'%C(yellow)%h%C(reset) %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(cyan)%d%C(reset)'
    # Similar to the log version above, but also shows the graph, with relative.
    dag = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(yellow)%h%C(reset) %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(cyan)%d%C(reset)' --all
    # The next two commands are the same as the previous two, but with date formatted differently.
    lold = log --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(magenta)%aD%C(reset) %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(cyan)%d%C(reset)'
    dagd = log --graph --abbrev-commit --decorate --format=format:'%C(yellow)%h%C(reset) %C(magenta)%aD%C(reset) %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(cyan)%d%C(reset)' --all

    # Modern workflow aliases
    sw = switch
    swc = switch -c
    sw- = switch -
    restore = restore
    unstage = restore --staged
    
    # Quick status checks
    ss = status --short
    sb = status --short --branch
    
    # Improved log commands
    recent = log --oneline -10
    today = log --since="midnight" --oneline
    yesterday = log --since="yesterday" --until="midnight" --oneline
    
    # Branch management
    cleanup = "!git branch --merged | grep -v '\\*\\|main\\|master' | xargs -r git branch -d"
    branches = branch -a
    remotes = remote -v
    
    # Stash improvements
    stash-staged = stash --staged
    stash-keep = stash --keep-index
    
    # Diff improvements
    word-diff = diff --word-diff=color
    stat = diff --stat
    
    # Commit helpers
    amend = commit --amend --no-edit
    fix = commit --fixup
    squash = commit --squash
    
    # Push/pull shortcuts
    pushf = push --force-with-lease
    pusha = push --all
    pusht = push --tags
    
    # Find commits
    find = "!git log --pretty=format:'%h %s' --grep"
    grep = grep -Ii
    
    # Show contributors
    contributors = shortlog --summary --numbered
    
    # Undo operations
    undo = reset HEAD~1 --mixed
    undo-hard = reset HEAD~1 --hard
    
    # Working tree operations
    save = "!git add -A && git commit -m 'WIP: savepoint'"
    wip = "!git add -A && git commit -m 'WIP'"
    
    # Uncomment the next line when using git credential manager core.
    # FYI: github cli is better.
    # gcm = credential-manager-core

# ------------------------------------------------------------------------------
# Git LFS.
# ------------------------------------------------------------------------------
[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

# ------------------------------------------------------------------------------
# Extra configs to include.
# ------------------------------------------------------------------------------
# Load in this order, so that the next one can override the previous.
# If it any of them don't exist, they are ignored.
[include]
    # OS-specific
    # -----------

    # This file should only exist in Windows systems.
    path = .gitconfig.windows.gitconfig

    # This file should only exist in Unix systems (Mac, Debian, Ubuntu, etc).
    path = .gitconfig.unix.gitconfig

    # This file should only exist in Linux systems (but not in a Mac).
    path = .gitconfig.linux.gitconfig

    # Installation-specific
    # ---------------------

    # Local overrides.
    path = .gitconfig.local.gitconfig

    # Examples of how to include extra configs conditionally, based on the current
    # directory or the current git repository.
    #
    # NOTE: This naming is so that editors recognize the file as a git config and
    # also for them to stay close in the directory structure.
    #
    #    [includeIf "gitdir:~/Private/"]
    #        path = .gitconfig.personal.gitconfig
    #
    #    [includeIf "gitdir:~/projects/"]
    #        path = .gitconfig.personal.gitconfig
    #
    #    [includeIf "gitdir:~/projects/some-repo/"]
    #        path = .gitconfig.some-repo-custom-config.gitconfig
    #
    #    [includeIf "gitdir:/workspaces/"]  # Containers.
    #        # Loaded in this order. If work file doesn't exist, it is ignored.
    #        path = .gitconfig.work.gitconfig

# ------------------------------------------------------------------------------
# Uses the GitHub CLI to manage credentials.
#
# The GitHub CLI must be installed and configured with `gh auth login` for this
# to work. It is highly recommended, as it provides a convenient way to use git
# with GitHub from the terminal (in containers too).
# ------------------------------------------------------------------------------
[credential "https://github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential
[credential "https://gist.github.com"]
    helper =
    helper = !/usr/bin/gh auth git-credential
