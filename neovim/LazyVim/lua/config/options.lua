--
-- Options are automatically loaded before lazy.nvim startup.
-- Default options that are always set:
-- https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/options.lua
-- Add any additional options here.
--

-- LazyVim has great defaults, which you can check in the link above. Most
-- likely I didn't need to set many of the options below, but I do because they
-- are my preferences and I want to keep them here just in case.

-- TODO: Check where we should put options that overwrite LazyVim options. I
-- believe it should be either in a specific plugin `init` function or in an
-- `autocmd` (seem more appropriate).

-- WARN: This file is loaded in VSCode Neovim, but only for options that are
-- common to both environments.

--------------------------------------------------------------------------------
-- Global variables
--------------------------------------------------------------------------------

local the_leader = " "
vim.g.mapleader = the_leader
vim.g.maplocalleader = the_leader

if not vim.g.vscode then
  -- Set to true if you have a Nerd Font installed and selected in the terminal.
  vim.g.have_nerd_font = true

  vim.g.lazyvim_prettier_needs_config = false

  -- Syntax highlighting in markdown code blocks. (Generated by Copilot.)
  vim.g.markdown_fenced_languages =
    { "ts=typescript", "sh", "lua", "python", "javascript", "typescript", "json", "html", "css", "vim" }
end

-- Next global variable.

--------------------------------------------------------------------------------
-- Options
--------------------------------------------------------------------------------

vim.opt.smartindent = true
vim.opt.autoindent = true

vim.opt.tabstop = 2
vim.opt.shiftwidth = 2
vim.opt.expandtab = true

vim.opt.wrap = true

vim.opt.number = true
vim.opt.relativenumber = true

-- Enable mouse mode, can be useful for resizing splits.
vim.opt.mouse = "a"

-- Don't show the mode, since it's already in the status line.
--------------------------------------------------------------------------------
-- Options
--------------------------------------------------------------------------------
vim.opt.showmode = false

-- Sync clipboard between OS and Neovim. Schedule the setting after `UiEnter`
-- because it can increase startup-time.
vim.schedule(function()
  vim.opt.clipboard = "unnamedplus"
end)

vim.opt.breakindent = true
vim.opt.breakindentopt = { shift = 2, minlines = 1 }

-- Save undo history, so you can undo even after closing a file.
vim.opt.undofile = true

-- Case-insensitive searching UNLESS \C or one or more capital letters in the
-- search term.
vim.opt.ignorecase = true
vim.opt.smartcase = true

-- Keep signcolumn on by default.
vim.opt.signcolumn = "yes"

-- Decrease update time
vim.opt.updatetime = 250

-- Decrease mapped sequence wait time
vim.opt.timeoutlen = 300

-- Configure how new splits should be opened
vim.opt.splitright = true
vim.opt.splitbelow = true

-- Sets how neovim will display certain whitespace characters in the editor.
vim.opt.list = true
vim.opt.listchars = { tab = "» ", trail = "·", nbsp = "␣" }

-- Preview substitutions live, as you type!
vim.opt.inccommand = "split"

-- Show which line your cursor is on.
vim.opt.cursorline = true

-- Minimal number of screen lines to keep above and below the cursor.
vim.opt.scrolloff = 10

-- Set rulers +N columns after the `textwidth`.
vim.opt.colorcolumn = { "+1", "+21", "+41" }

-- Next option above.

--------------------------------------------------------------------------------
-- Abbreviations
--------------------------------------------------------------------------------

vim.cmd("iab lv LazyVim")

-- Shebangs.
vim.cmd("iab _sb #!/usr/bin/env")
vim.cmd("iab _posix #!/usr/bin/env sh")
vim.cmd("iab _deno #!/usr/bin/env -S deno run --allow-read")
vim.cmd("iab _fsx #!/usr/bin/env -S dotnet fsi")

-- EditorConfig alternatives.
-- When EditorConfig is not available, creates a modeline with my prefs.
-- For most languages I use the next line. Change tab (spaces) width, usually for Python.
vim.cmd("iab _ec   vim: tw=120 ts=2 sw=2 ai et ff=unix fenc=utf-8 fixeol eol fdm=marker fdl=0 fen")
vim.cmd("iab _ecpy vim: tw=80 ts=4 sw=4 ai et ff=unix fenc=utf-8 fixeol eol fdm=marker fdl=0 fen")

-- Shell
-- -e: exit on error
-- -u: exit on undefined variable
-- -o pipefail: exits on command pipe failures
-- -x: print commands before execution. Use only to debug, as it makes the
--     output really verbose.
vim.cmd("iab _euxo set -euxo pipefail")
vim.cmd("iab _euo set -euo pipefail")

vim.cmd("iab _devnull &>/dev/null 2>&1")
vim.cmd("iab _dn &>/dev/null 2>&1")
vim.cmd("iab _devnullshort &>/dev/null") -- Shorter but less portable.
vim.cmd("iab _dnsh &>/dev/null") -- Shorter but less portable.

-- Simplify writing shell command checks.
vim.cmd("iab _out >/dev/null 2>&1; then")
vim.cmd("iab _command command -v _out")

-- Next abbreviation above.

--------------------------------------------------------------------------------
-- Spell checker settings
--------------------------------------------------------------------------------
-- Keep it separated and last, so it doesn't interfere with other settings.

-- LazyVim: toggle with <Leader>us.
vim.opt.spell = false

-- NOTE: The spelling_language and spelling_languages options in EditorConfig
-- takes precedence over spelllang. If you are not seeing what you expect,
-- check in your EditorConfig file.
-- TODO: The spellchecker didn't work only with the EditorConfig settings,
-- ended up needing this one too, not sure why. Perhaps double check this.
vim.opt.spelllang = "en_us,en,pt_br,pt"
vim.opt.spellfile = (os.getenv("HOME") .. "/.mcra/spell/spell_dict.utf-8.add")
