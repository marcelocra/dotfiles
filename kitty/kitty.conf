# kitty.conf - My preferred kitty terminal configuration.

# MAPPINGS

map ctrl+a>r load_config_file
map ctrl+a>- launch --cwd=current
map ctrl+a>| launch --cwd=current
map ctrl+a>ctrl+l next_tab
map ctrl+a>ctrl+h previous_tab
map ctrl+a>j next_window
map ctrl+a>k previous_window
map ctrl+a>l next_window
map ctrl+a>h previous_window

# map ctrl+g kitten hints --type=linenum --linenum-action=tab nvim +{line} {path}

# map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay less +G -R
# map f1 launch --cwd=${HOME}/.config/kitty --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay ./scripts/less-tempfile.sh
map f1 launch --stdin-source=@screen_scrollback --stdin-add-formatting --type=overlay ${HOME}/.config/kitty/scripts/less-tempfile.sh

map ctrl+shift+enter launch --cwd=current
map ctrl+shift+t new_tab_with_cwd

# Next mapping.


# INCLUDES

# Apply theme early, so we can override some parts later.
include ./themes/tokyo-night.conf

# Search word in Google dictionary (will open a web browser).
include ./kittens/google-dictionary.py


# FONT

# font_family      family="Geist Mono"
# font_family      family="Cascadia Code NF"
# font_family      family="Red Hat Mono"
# font_family      family="Fira Code"
# font_family      family="Cascadia Code"
# font_family      family="Reddit Mono"
# font_family      family="Monaspace Radon Var" style="Regular"
# font_family      family="Rec Mono Duotone" style="Regular"
# font_family      family=SourceCodeVF variable_name=SourceCodeUpright features="+zero cv01=2" wght=380
#
# font_family      family="IBM Plex Mono" style="Regular"
# bold_font        family="IBM Plex Mono" style="Bold"
# italic_font      family="IBM Plex Mono" style="Italic"
# bold_italic_font family="IBM Plex Mono" style="Bold"

# font_family      family=SourceCodeVF variable_name=SourceCodeUpright features="+zero cv01=1 cv02=1 cv17=1" wght=550
# Weight 550 works well for light and dark versions.
# Alternative sets/characters:
#   cv01: a, cv02: g, cv08: &, cv09: @, cv17: 1, zero: reversed dashed zero, ss02,03,04: a, g, i+l

font_family      family="Cascadia Code NF" features="ss01 ss19 ss20" wght=350

font_size 11.0

#: Map the specified Unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each Unicode code
#: point is specified in the form `U+<code point in hexadecimal>`. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. This option can be specified multiple times.
#
# NOTE: It means that we don't need to use patched fonts. Actually, kitty
# documentation recommends not using them at all, saying that they destroy
# fonts:
#
#     If you are trying to use a font patched with Nerd Fonts symbols, donâ€™t do that
#     as patching destroys fonts. There is no need, kitty has a builtin NERD font and
#     will use it for symbols not found in any other font on your system.
#
# They recommend using the following symbol map, which should enable all NERD
# symbols without requiring patched fonts. For more details, see full
# documentation in the following link:
#
#     https://sw.kovidgoyal.net/kitty/faq/#kitty-is-not-able-to-use-my-favorite-font
#

# Nerd Fonts v3.2.0
symbol_map U+e000-U+e00a,U+ea60-U+ebeb,U+e0a0-U+e0c8,U+e0ca,U+e0cc-U+e0d7,U+e200-U+e2a9,U+e300-U+e3e3,U+e5fa-U+e6b1,U+e700-U+e7c5,U+ed00-U+efc1,U+f000-U+f2ff,U+f000-U+f2e0,U+f300-U+f372,U+f400-U+f533,U+f0001-U+f1af0 Symbols Nerd Font Mono

#: Modify font characteristics such as the position or thickness of
#: the underline and strikethrough. The modifications can have the
#: suffix px for pixels or % for percentage of original value. No
#: suffix means use pts. For example::
#:
#:     modify_font underline_position -2
#:     modify_font underline_thickness 150%
#:     modify_font strikethrough_position 2px
#:
#: Additionally, you can modify the size of the cell in which each
#: font glyph is rendered and the baseline at which the glyph is
#: placed in the cell. For example::
#:
#:     modify_font cell_width 80%
#:     modify_font cell_height -2px
#:     modify_font baseline 3
#:
#: Note that modifying the baseline will automatically adjust the
#: underline and strikethrough positions by the same amount.
#: Increasing the baseline raises glyphs inside the cell and
#: decreasing it lowers them. Decreasing the cell size might cause
#: rendering artifacts, so use with care.

# modify_font cell_width 106%  # When using Monaspace Radon Var, to keep `w` inside the box.
# modify_font cell_height 10px


# CURSOR

cursor #ff4500
cursor_text_color #000


# WINDOW

#: If enabled, the OS Window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the OS Window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.
#
# NOTE: As the name suggests, it only remembers the size, not the position. That
# makes this option considerable less useful. I ended up using xdotool to get
# the behavior that I wanted: `xdotool key Super+Right`.

# remember_window_size  no
# initial_window_width  640
# initial_window_height 400


#: Hide the window decorations (title-bar and window borders) with
#: yes. On macOS, titlebar-only and titlebar-and-corners can be used
#: to only hide the titlebar and the rounded corners. Whether this
#: works and exactly what effect it has depends on the window
#: manager/operating system. Note that the effects of changing this
#: option when reloading config are undefined. When using titlebar-
#: only, it is useful to also set window_margin_width and
#: placement_strategy to prevent the rounded corners from clipping
#: text. Or use titlebar-and-corners.

hide_window_decorations no

# window_border_width 1px
# window_margin_width 1
# window_padding_width 1

# single_window_margin_width 3
# single_window_padding_width 3


# BACKGROUND OPACITY

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.
#: Changing this option by reloading the config is not supported.

dynamic_background_opacity yes

#: The opacity of the background. A number between zero and one, where
#: one is opaque and zero is fully transparent. This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the background color's opacity in
#: cells that have the same background color as the default terminal
#: background, so that things like the status bar in vim, powerline
#: prompts, etc. still look good. But it means that if you use a color
#: theme with a background color in your editor, it will not be
#: rendered as transparent. Instead you should change the default
#: background color in your kitty config and not use a background
#: color in the editor color scheme. Or use the escape codes to set
#: the terminals default colors in a shell script to launch your
#: editor. See also transparent_background_colors. Be aware that using
#: a value less than 1.0 is a (possibly significant) performance hit.
#: When using a low value for this setting, it is desirable that you
#: set the background color to a color the matches the general color
#: of the desktop background, for best text rendering.  If you want to
#: dynamically change transparency of windows, set
#: dynamic_background_opacity to yes (this is off by default as it has
#: a performance cost). Changing this option when reloading the config
#: will only work if dynamic_background_opacity was enabled in the
#: original config.

background_opacity 0.92

# vim: tw=80 ts=2 sw=2 ai et ff=unix fenc=utf-8 et fixeol eol fdm=marker fdl=0 fen

